var tipuesearch = {"pages": [{'title': '簡介', 'text': '二乙與一乙, 2018.12.31 (一) 之課程將分別在第十四週, 第十五週與第十六週之星期四晚上補課. \n 12/13 (四) 19:00 - 19:50 (二乙), 20:00 - 20:50 (一乙) \n 12/20 (四) 19:00 - 19:50 (二乙), 20:00 - 20:50 (一乙) \n 12/27 (四) 19:00 - 19:50 (二乙), 20:00 - 20:50 (一乙) \n \n 2018 Fall  計算機程式 與 電腦輔助設計實習 課程期末分組示範網站 \n 本倉儲位於:\xa0 https://github.com/mdecp2018/finalproject-bgx \xa0\xa0 \n Github  靜態網站:\xa0\xa0 https://mdecp2018.github.io/finalproject-bgx \xa0 \n 與  Heroku  上的\xa0 http://cp2018-bgx.herokuapp.com \xa0動態網站保持同步 \n 電腦輔助設計室與協同設計室行事曆 \n 全頁檢視 \n \n', 'tags': '', 'url': '簡介.html'}, {'title': '可攜系統更新', 'text': 'p37-18.12.7z \n 升級為 Python 3.7.1 ( What\'s New in Python 3.7.1 ) \n 內含 Heroku cli\xa0 版本 7.18.9 (啟動可攜系統後, 以 heroku --version 查詢版次, 以 heroku login 登入系統, 以 heroku logs 查詢啟動紀錄) \n 內含 Eric6 IDE 18.11 \n 內含 V-rep 3.5.0 rev4 \n 內含 Fossil SCM Verion 2.7 \n \n 上述從 Python 3.7.0 更新到 Python 3.7.1 是將安裝在 c:\\python37 目錄下的系統安裝檔案, 直接覆蓋 Python 3.7.0 可攜版本. \n 但因 Scripts/pip.exe 與 pip3.7.exe 與 pip3.exe 會將 c:\\python37 直接寫入這三個 .exe 檔案, 導致直接執行 pip 時, 會因為找不到 c:\\python37\\python.exe 而無法執行, 必須使用 python -m pip 才能執行. \n 修改方式為使用\xa0 https://mh-nexus.de/en/hxd/ \xa0, 在二位元模式下編輯這三個 .exe 檔案, 將 c:\\python37 換為 y:\\p37 即可. \n 可攜  HxD.7z \n 如何建立 Windows 64 位元可攜系統 \n 在 Windows 10 建立 Python 可攜系統的目的, 在於讓使用者可以自行攜帶與系統設定相關的檔案, 以及自行攜帶系統所安裝的 Python 特定模組, 讓使用者能將隨身系統放入隨身碟或隨身硬碟, 在任何 Windows 10 64 位元操作系統中使用. \n 建立可攜系統的步驟如下: \n \n 下載 64 位元 Windows 的 Python 安裝版本 \n 在 Windows 10 安裝 Python, 例如: 令其位於\xa0 C:\\p37 \n 將 C:\\p37 複製到 C:\\tmp\\ p37\\data 目錄後, 移除前述所安裝的 Python 版本 \n 利用下列 C:\\p37\\start.bat 與 C:\\p37\\stop.bat 啟動與關閉可攜 Python 系統 \n 配合 SciTE 作為可攜 Python 系統的程式編輯器 \n 由於前述安裝的 Python 版本, 會將系統目錄寫入 Scripts\\pip.exe 等三個檔案中, 可以使用\xa0\xa0 https://mh-nexus.de/en/hxd/ \xa0改為可攜系統對應目錄. \n 其餘所需 Python 模組, 直接由可攜系統啟動後, 以 pip install 安裝 \n \n start.bat \n @echo off\nREM 設定 y 硬碟代號與 data 目錄對應\nset Disk=y\nsubst %Disk%: "data"\nREM 設定 leo 相關對應 Home 位置\nset HomePath=%Disk%:\\home\nset HomeDrive=%Disk%:\\home\nset Home=%Disk%:\\home\nREM 將系統 Python 程式的 io 設為 utf-8\nset PYTHONIOENCODING="utf-8"\nREM 將後續的指令執行, 以 %Disk% 為主\n%Disk%:\nREM 設定 PYTHONPATH\nset PYTHONPATH=%Disk%:\\p37\\DLLs;%Disk%:\\p37\\Lib;%Disk%:\\p37\\Lib\\site-packages;\nset PYTHONHOME=%Disk%:\\p37\nREM for Qt and Qt Creator\nset LLVM_INSTALL_DIR=%Disk%:\\LLVM;\nset QBS_INSTALL_DIR=%Disk%:\\qbs-windows-x86_64-1.10.0;\nREM for TCL\nset TCL_LIBRARY=%Disk%:\\p37\\tcl\\tcl8.6\nset TK_LIBRARY=%Disk%:\\p37\\tcl\\tcl8.6\nREM 設定 Leo 所用的編輯器\nset LEO_EDITOR=%Disk%:\\scite\\bin\\Sc1.exe;\nset BOOST_ROOT=%Disk%:\\boost_1_66_0\\;\nREM set CMAKE_PREFIX_PATH=%Disk%:\\msys64\\mingw64\\\nREM for fossil https 連線設定\nREM 若在近端使用 fossil ui 則要蓋掉\nREM set HTTPS=on\nREM 指令搜尋路徑設定\nREM set path1=%PATH%;%Disk%:;%Disk%:\\p37;%Disk%:\\git\\bin;%Disk%:\\stunnel\\bin;%Disk%:\\sqlite-tools;%Disk%:\\p37\\Scripts;%Disk%:\\Git\\bin;%Disk%:\\vrep331;\nREM path1 is base of this portable Python3.6 system\nset path1=%Disk%:;%Disk%:\\p37;%Disk%:\\git\\bin;%Disk%:\\stunnel\\bin;%Disk%:\\sqlite-tools;%Disk%:\\p37\\Scripts;%Disk%:\\Git\\bin;%Disk%:\\vrep331;%Disk%:\\p37\\Lib\\site-packages\\PyQt5\\Qt\\bin;\nREM path2 is for pandoc and miktex\nset path2=%Disk%:\\pandoc-2.0.2;%Disk%:\\miktex_portable\\texmfs\\install\\miktex\\bin;%Disk%:\\lua-5.3.4\\bin;%Disk%:\\coreutils-5.3.0\\bin;%Disk%:\\qtcreator-4.7.0-rc1\\bin;%Disk%:\\patch-2.5.9-7-bin\\bin;\nREM path3 is for gcc development \nset path3=%Disk%:\\msys64\\mingw64\\bin;%Disk%:\\swigwin-3.0.12;%Disk%:\\cmake-3.10.1-win64-x64\\bin;%Disk%:\\diffutils-2.8.7-1\\bin;%Disk%:\\patch-2.5.9-7\\bin;%Disk%:\\graphviz-2.38\\bin;\nset path4=%Disk%:\\boost_1_66_0\\;%Disk%:\\Strawberry\\perl\\bin;%D%:\\jom_1_1_2;%Disk%:\\LLVM\\bin;%Disk%:\\QtCreator\\bin;%Disk%:\\vrep340_rev1;%Disk%:\\p37\\tcl\\tcl8.6;%Disk%:\\xsltproc;\nset path5=%Disk%:\\ffmpeg-20180504-dc7a8f7-win64-static\\bin;%Disk%:\\oce-0.18.1\\bin\\;%Disk%:\\oce-0.18.1\\lib\\;%Disk%:\\gnuplot\\bin;\nset JAVA_HOME=%Disk%:\\Java\\jdk1.8.0_172;\nset ANDROID_HOME=%Disk%:\\Android\\sdk;\nset path6=%Disk%:\\Java\\jdk1.8.0_172\\bin;%Disk%:\\Java\\jre1.8.0_172\\bin;%Disk%:\\Android\\AndroidStudio\\bin;%Disk%:\\Android\\sdk\\tools;%Disk%:\\Android\\sdk\\platform-tools;%Disk%:\\BIND9.12.2-P2.x64;\nREM for Pythonocc under MSYS2 according to https://groups.google.com/forum/?utm_medium=email&utm_source=footer#!msg/pythonocc/z-NI9A-Vyic/8QjD81q-AwAJ\nset CSF_GraphicShr=%Disk%:\\oce-0.18.1\\bin\\TKOpenGl.dll\npath=%path%;%path1%;%path2%;%path3%;%path4%;%path5%;%path6%;\nstart /MIN %Disk%:\\scite\\bin\\Sc1.exe\nstart /MIN %Disk%:\\scite\\bin\\Sc1.exe\nstart /MIN cmd.exe\nstart /MIN cmd.exe\nREM start /MIN cmd.exe /k "y:\\cp2018.bat"\nREM start /MIN cmd.exe /k "y:\\cp2018_http_server.bat\nREM start /MIN cmd.exe /k "y:\\cadp2018.bat"\nREM 啟動 Leo 編輯器\n%Disk%:\\p37\\python.exe %Disk%:\\launchLeo.py\nREM 啟動 stunnel\nREM start /MIN fossil.exe server -P 127.0.0.1:8080 %Disk%:\\tmp\\fossil_repo\nREM start /MIN stunnel.exe\nREM start qtcreator\nExit \n stop.bat \n @echo off\nset Disk=y\nREM 關閉 SciTE\ntaskkill /IM Sc1.exe /F\nREM 關閉 python\ntaskkill /IM python.exe /F\ntaskkill /IM pythonw.exe /F\nREM 關閉 stunnel\ntaskkill /IM stunnel.exe /F\nREM 關閉 fossil\ntaskkill /IM fossil.exe /F\nrem taskkill /IM sharex.exe /F\nREM 清除 log 資料\npath=%PATH%;\nREM del /Q /F  V:\\tmp\\*.*\nREM 終止虛擬硬碟與目錄的對應\nsubst %Disk%: /D\nREM 關閉 cmd 指令視窗\ntaskkill /IM cmd.exe /F\nREM taskkill /IM mingw32 /F\nEXIT \n \n \n \n', 'tags': '', 'url': '可攜系統更新.html'}, {'title': '靜態與動態網站', 'text': '網站類型 \n 使用者在建構網站時, 可以選擇採用靜態或動態網站類型, 靜態網站主要伺服  html  檔案, 其中可能內含能在客戶端瀏覽器中執行的  JavaScript  程式. \n 而動態網站則將網際程式儲存在伺服器端, 透過解譯器與瀏覽器端的使用者互動後, 將  html  檔案 (也可能內含能在客戶端瀏覽器中執行的  JavaScript  程式) 送回瀏覽器端執行. \n 本課程的靜態網站利用  Github Pages  建構, 而動態網站則採用  Heroku  建構. \n 靜態網站優點 \n 相對於動態網站, 靜態網站架構單純, 且直接送回使用者要求的  html  檔案, 反應速度快, 伺服器端通常只需  WWW \xa0 伺服器, 因此維護成本較低. \n \n 架構單純 \n 反應速度快 \n 維護成本較低 \n 較無受駭危機 \n \n 靜態網站缺點 \n \n 通常無法直接在網站中修改內容 \n 較無法與使用者進行互動 \n \n 動態網站優點 \n \n 規劃彈性高 \n 能與使用者直接進行互動 \n \n 動態網站缺點 \n \n 反應速度較慢 \n 維護成本較高 \n \n \n', 'tags': '', 'url': '靜態與動態網站.html'}, {'title': '特殊處理', 'text': 'CMSimfly 中的 get_page2, 主要讓 Python 程式頁面中的 Brython 在靜態頁面, 可以正確透過 pythonpage 設定相對目錄, 而動態頁面則需要使用絕對目錄設定. \n 已知問題 \n 透過 get_page2 轉換特殊字串的用法, 若在頁面引用 get_page2 的程式碼, 將會造成轉為靜態網頁時, 引用內容也會被換成非動態模式下的字串, 而造成程式碼引用錯誤的問題.', 'tags': '', 'url': '特殊處理.html'}, {'title': '分組網站', 'text': '\n \n \n \n \n \n \n \n \n', 'tags': '', 'url': '分組網站.html'}, {'title': '課程專題', 'text': '計算機程式、網際內容管理、電腦輔助設計實習與協同產品設計實習等系列課程的目的, 在培育 具利用網際運算執行全球協同創新產品設計能力的機械設計工程師. \n 在培養下一代具利用網際運算執行全球協同創新產品設計能力的機械設計工程師, 需要在每一門課程注入四種溝通用的語言 (languages): 英文, 網路, 電腦程式與數學. \n 網際運算 \n 先從認識周遭網路軟硬體使用的基本架構作為起點, 了解上課電腦網路的設定與區網與廣域網路的配置, 自行動手進行各種組態的測試與驗證, 針對有線與無線網路的規格差異進行比較, 從中找出執行特定專案的最適網路配置. \n 除了徹底了解 Windows 10 外, 針對周遭的各種 Windows Servers 與功能進行初步了解, 自行安裝 Ubuntu Server 與 Desktop, 從基本的網路配置到基本的 Linux 指令, 了解如何在網路節點配置可供設計運算的資源. \n 在 Ubuntu 伺服器中安裝 Nginx, 再設法安裝 Fossil SCM 與 Stunnel, 了解如何在 https Fossil SCM 環境中, 利用 Python 程式建立使用者帳號, 並利用網路郵件通知用戶帳號與密碼. \n 在 Ubuntu 伺服器中配置 IPv4 與 IPv6 網路設定, 了解如何安裝 Squid Proxy 伺服器, 讓純 IPv6 設定電腦可以透過代理主機連到只支援 IPv4 協定的 WWW 伺服器. \n 在 Ubuntu 伺服器中配置 BIND 伺服器, 了解各網際主機 IP 位址與符號名稱轉換的機制. \n 在 Ubuntu 伺服器中配置完整的 GCC 與 Python 、 Javascript 及 Lua 程式開發環境, 並著手編寫網際程式, 設法利用分散式與負載平衡方式安排網際伺服器叢集. \n 在 Windows 10 或 Ubuntu 配置 PyQt5 視窗程式, 設法與上述網際配置的伺服器叢集電腦進行互動. \n Mathematics of design:\xa0 https://inkbotdesign.com/the-mathematics-of-design/ \xa0 \n 全球協同 \n 養成閱讀英文資料的習慣, 操作軟體時使用英文介面, 每天背誦一小段 英文小品 , 勤查 單字 , 定期取得英文能力認證. \n 用心經營自己的  Github 、 Gitlab 、 Bitbucket \xa0 倉儲與  Linkedin  帳號. \n 創新產品設計 \n C-K theory: modelling creative thinking and its impact on research.pdf \n Extending the C–K design theory: A theoretical background for personal design assistants.pdf \n 10 years of C-K theory: a survey on the academic and industrial impacts of a design theory.pdf \n Imagining Knowledge, a Formal Account of Design.pdf \n', 'tags': '', 'url': '課程專題.html'}, {'title': '計算機程式', 'text': 'Learn to Program with Python 3:\xa0 https://link.springer.com/book/10.1007/978-1-4842-3879-0 \xa0 \n The Blender Python API:\xa0 https://link.springer.com/book/10.1007/978-1-4842-2802-9 \xa0 \n 虎尾 科技大學機械設計工程系的計算機程式課程網頁位於:\xa0 http://mde.tw/cp2018/ \xa0 \n 本課程的目的在讓學員了解如何利用 Python 程式解決問題: \n PyQt5 視窗程式 \n 問題一: 能否利用 Eric6 建立一個視窗程式, 開啟 CMSimfly 系統中位於 config 目錄下的 content.htm? 甚至可以套用\xa0QPlainTextEdit widget 顯示 html 原始碼, 並利用\xa0\xa0 QWebEngineView render 超文件. \n 例如:\xa0 https://github.com/gen2brain/pyhtmleditor \xa0(使用 PyQt4 格式) \n \n Eric6 Qt Design 實際練習: \n http://doc.qt.io/qt-5/designer-quick-start.html \xa0 \n Using \xa0 Qt Designer \xa0 involves \xa0 four \xa0 basic steps: \n \n Choose your form and objects (選擇需要的表單與物件) \n Lay the objects out on the form (將物件布局在表單上) \n Connect the signals to the slots (將訊號連結至插槽) \n Preview the form (預覽所完成的表單) \n \n 所完成的 Eric6 專案:  cp-project.7z \n Qt Designer 布局:\xa0 http://doc.qt.io/qt-5/layout.html \xa0 \n Qt examples:\xa0 http://doc.qt.io/qt-5/qtexamples.html \xa0 \n https://github.com/baoboa/pyqt5/tree/master/examples/mainwindows/mdi \xa0 \n 為了能以 UTF-8 開啟檔案, 必須加入: \n instr = QTextStream(file)\ninstr.setCodec("UTF-8") \n http://eric-ide.python-projects.org/tutorials/MiniBrowser/ \xa0 \n https://www.binpress.com/building-text-editor-pyqt-1/ \xa0( https://github.com/goldsborough/Writer-Tutorial \xa0) \n Flask 網際程式 \n 最簡單的 Flask 程式, 存為 wsgi.py: \n from flask import Flask\napp = Flask(__name__)\n\n@app.route("/")\ndef hello():\n    return "Hello World!"\n\napp.run(host=\'127.0.0.1\', port=80, debug=True) \n 利用 SciTE 開啟上述程式後, 以 Tool -> Go, 即可以瀏覽器開啟  http://localhost \xa0, 系統回傳 "Hello World". \n 假如要讓上述 Flask 程式在 https 模式下啟動, 在 Windows 操作環境, 需要\xa0 http://gnuwin32.sourceforge.net/packages/openssl.htm \xa0,\xa0 以下列指令建立 localhost.key 與 localhost.crt \n openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout localhost.key -out localhost.crt \n 並將 localhost.key 與 localhost.crt 與\xa0 wsgi.py 放在同一目錄下, 並將上述程式改為: \n from flask import Flask\nimport ssl\n\ncontext = ssl.SSLContext(ssl.PROTOCOL_TLSv1_2)\ncontext.load_cert_chain(\'localhost.crt\', \'localhost.key\')\n\napp = Flask(__name__)\n\n@app.route("/")\ndef hello():\n    return "Hello World!"\n\napp.run(host=\'127.0.0.1\', port=443, debug=True, ssl_context=context) \n 利用 SciTE 開啟上述程式後, 以 Tool -> Go, 即可以瀏覽器開啟  https://localhost \xa0, 系統回傳 "Hello World". \n Flask 登入流程 \n https://realpython.com/introduction-to-flask-part-2-creating-a-login-page/ \xa0 \n flask_login.7z \n 操作要點: \n \n 是否會自行利用 openssl 建立 crt 與 key 檔案? \n 是否會將 wsgi.py 在 https 模式啟動? \n 是否了解  html form  表單建構與取輸入流程? \n 使用者登入後, 如何利用 session 儲存登入狀態? \n', 'tags': '', 'url': '計算機程式.html'}, {'title': '計算機程式議題', 'text': 'Brython \n https://github.com/mdecourse/webgame \xa0 \n 網際 Flask \n https://github.com/mdecourse/wcms-scrum1 \xa0 \n CMSimfly 系統研究 \n https://github.com/chiamingyen/cmsimfly \xa0 \n Pygrouf 系統研究 \n https://github.com/chiamingyen/pygrouf \xa0 \n 網際機構模擬系統 \n 承接\xa0 https://github.com/KmolYuan/Pyslvs-PyQt5 \xa0系統中的 YAML 檔案格式, 讓使用者在網際環境中進行平面機構模擬, 並將各機構合成或模擬後所得到的網際 URL 存入資料庫. \n 單機 GUI 程式 \n 從簡單計算機到工程用計算機 \n https://github.com/scrum-1/scrum_pyqt5_calculator \xa0 \n 或者利用  Flask 、 Pybean  與  Brython  (or  Fegari-Web ) 開發網際運算器, 能將使用者在線上運算的內容存入資料庫, 或建立一個簡單的網際運算環境, 讓使用者輸入  Brython  或  Lua  程式進行設計運算. 例如:\xa0\xa0 http://mde.tw/vecp2018/lua/SchoolProject/ \xa0導入資料庫系統, 讓使用者可以將運算程式存入資料庫, 或導入後編輯再運算利用. \n 多功能編輯器 \n https://github.com/KmolYuan/kmol-editor \xa0 \n 平面凸輪輔助設計系統 \n https://github.com/KmolYuan/cam-profile \xa0 \n Beautifulsoup4 應用研究 \n Mechanicalsoup 應用研究 \n Graph Tool 應用研究 \n  準備測試 ggame  \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n', 'tags': '', 'url': '計算機程式議題.html'}, {'title': 'CMSimfly', 'text': 'CMSimfly  是一套利用  beautifulsoup4  對 config/content.htm 分頁後, 以  TinyMCE4  執行編輯的網際內容管理系統. \n 以下為可行的開發項目: \n \n 採用 SQLite 資料庫儲存內容資料, 以允許重複頁面標題. \n 在靜態內容管理系統中, 納入 \xa0 Tipue Search \xa0 功能. \n 目前採用 html editor, 若能改為 \xa0 Markdown editor , 然後再 轉為 \xa0 html, 應該有助於協同. \n 能否導入 \xa0 together.js , 進行線上協同編輯? \n \n', 'tags': '', 'url': 'CMSimfly.html'}, {'title': '網際繪圖', 'text': 'Brython  與  Fengari-web  都可以透過 scripting 的方式在網際繪圖, 前者使用 Python3 語法, 而後者使用 Lua 程式語法, Brython 目前的 brython-dist.js 高達 3.7 MB, 而 fengari-web.js 只需要 233 KB. \n http://lab.kmol.info/blog/brython-programming-environment.html \xa0說明如何使用 Brython 進行與機械設計領域相關的網際繪圖, 在此, 則希望利用 Lua 進行相同效果的網際程式設計. \n 由於本網際內容管理程式使用 Tinymce4 網際編輯器套件, 因此為了讓 CMSimfly 編輯器中可以輸入 script 與 canvas 等網際繪圖相關的 html 標註, 必須要修改相關設定: \n 首先必須將原先使用的 xhtml 格式, 改為 html, 以避開為了滿足 xhtml 格式的 CDATA 註解資料. \n 接下來則需開啟 script 與 canvas 標註的輸入, 不至於被 Tinymce4 濾除, 其中 canvas 的開放, 需要使用 valid_elements 設定, 以開啟所有標註達成, 而 script 則利用 extended_valid_elements 設定完成. \n 修改上述設定後, 便可直接在 CMSimfly 編輯器中, 直接輸入各種與 fengari-web 相關的網際\xa0 Lua 程式設計內容. \n 以下允許所有的 html 標註, 並且可以利用 lua 進行網際繪圖: \n   valid_elements : \'*[*]\',\n  extended_valid_elements: "script[language|type|src]", \n 以下則使用一般 Lua 程式繪圖: \n <canvas id="canvas" width="600" height="400"></canvas>\n<p>\n<script type="application/lua">\n-- 導入 "js" 模組\nlocal js = require "js"\n-- global 就是 javascript 的 window\nlocal global = js.global\nlocal document = global.document\n-- html 檔案中 canvas\u3000id 設為 "canvas"\nlocal canvas = document:getElementById("canvas")\n-- 將 ctx 設為 canvas 2d 繪圖畫布變數\nlocal ctx = canvas:getContext("2d")\n \n-- 屬性呼叫使用 . 而方法呼叫使用 :\n-- 設定填圖顏色\nctx.fillStyle = "rgb(200,0,0)"\n-- 設定畫筆顏色\nctx.strokeStyle = "rgb(0,0,200)"\n \n-- 乘上 deg 可轉為徑度單位\ndeg = math.pi / 180\n \n-- 建立多邊形定點位置畫線函式\nfunction star(radius, xc, yc, n)\n    --radius = 100\n    --xc = 200\n    --yc = 200\n    xi = xc + radius*math.cos((360/n)*deg+90*deg)\n    yi = yc - radius*math.sin((360/n)*deg+90*deg)\n    ctx:beginPath()\n    ctx:moveTo(xi,yi)\n    for i = 2, n+1 do\n        x = xc + radius*math.cos((360/n)*deg*i+90*deg)\n        y = yc - radius*math.sin((360/n)*deg*i+90*deg)\n        ctx:lineTo(x,y)\n    end\nend\n \n-- 以下利用多邊形畫線函式呼叫執行畫框線或填入顏色\n-- 畫五邊形框線\nstar(100, 200, 200, 5)\nctx:closePath()\nctx:stroke()\n \n-- 填三角形色塊\nstar(50, 350, 200, 3)\nctx:closePath()\nctx:fill()\n \n-- 改變畫線顏色後, 畫七邊形框線\nctx.strokeStyle = "rgb(0,200,20)"\nstar(50, 450, 200, 7)\nctx:closePath()\nctx:stroke()\n</script> \n \n \n \n \n 以下則使用 Lua 的物件導向程式設計繪圖:  \n <canvas id="canvas1" width="600" height="400"></canvas>\n<script type="application/lua">\n-- 導入 "js" 模組\nlocal js = require "js"\n-- global 就是 javascript 的 window\nlocal global = js.global\nlocal document = global.document\n-- html 檔案中 canvas\u3000id 設為 "canvas"\nlocal canvas = document:getElementById("canvas1")\n-- 將 ctx 設為 canvas 2d 繪圖畫布變數\nlocal ctx = canvas:getContext("2d")\n\n-- 屬性呼叫使用 . 而方法呼叫使用 :\n-- 設定填圖顏色\nctx.fillStyle = "rgb(200,0,0)"\n-- 設定畫筆顏色\nctx.strokeStyle = "rgb(0,0,200)"\n\n-- 乘上 deg 可轉為徑度單位\ndeg = math.pi / 180\n\n-- 建立多邊形定點位置畫線函式\nlocal star = {}\nstar.__index = star\n\nfunction star.new(radius, xc, yc, n, sof)\n    --radius = 100\n    --xc = 200\n    --yc = 200\n    local self = setmetatable({}, star)\n    self.radius = radius\n    self.xc = xc\n    self.yc = yc\n    self.n = n\n    -- stroke or fill\n    self.sof = sof\n    --return self\n--end\n\n--function star.plot(self)\n    xi = self.xc + self.radius*math.cos((360/self.n)*deg+90*deg)\n    yi = self.yc - self.radius*math.sin((360/self.n)*deg+90*deg)\n    ctx:beginPath()\n    ctx:moveTo(xi,yi)\n    for i = 2, self.n+1 do\n\tx = self.xc + self.radius*math.cos((360/self.n)*deg*i+90*deg)\n\ty = self.yc - self.radius*math.sin((360/self.n)*deg*i+90*deg)\n\tctx:lineTo(x,y)\n    end\n    ctx:closePath()\n    if self.sof == true then\n\tctx:stroke()\n    else\n\tctx:fill()\n    end\nend\n\n-- 以下利用多邊形畫線函式呼叫執行畫框線或填入顏色\n-- 畫五邊形框線\nstar1 = star.new(100, 200, 200, 5, true)\n--star1:plot()\n\n-- 填三角形色塊\nstar2 = star.new(50, 350, 200, 3, false)\n--star2:plot()\n\n-- 改變畫線顏色後, 畫七邊形框線\nctx.strokeStyle = "rgb(0,200,20)"\nstar3 = star.new(50, 450, 200, 7, true)\n--star3:plot()\n</script> \n \n \n \n \n \n', 'tags': '', 'url': '網際繪圖.html'}, {'title': 'Lua gear', 'text': '正齒輪繪圖 \n \n \n \n \n \n \n \n', 'tags': '', 'url': 'Lua gear.html'}, {'title': 'Lua-Cango', 'text': 'Cango 繪圖 \n \n \n \n \n \n \n \n \n \n', 'tags': '', 'url': 'Lua-Cango.html'}, {'title': '網際模擬程式', 'text': 'https://github.com/mdecourse/webgame \xa0是一套源自 \xa0https://github.com/tiggerntatie/brython-server \xa0的網際模擬程式庫, 適合用來開發線上遊戲或與工程設計相關的網際程式. \n 之前的 js 程式庫都採用遠端資料, 目前將各程式庫升級為最新版本, 且改為自帶程式庫. \n 參考的網際程式庫:\xa0 https://github.com/tiggerntatie/ggame \xa0 \n 由於此 ggame 程式庫使用 \n jquery-3.3.1.min.js -\xa0 https://jquery.com/ \xa0 jquery-ui.1.12.1.min.js -\xa0 https://jqueryui.com/ \xa0 pixi-4.8.2.min.js -\xa0 http://www.pixijs.com/ \xa0 buzz-1.2.1.js -\xa0 http://buzz.jaysalvat.com/ \xa0 brython-3.7.0.js -\xa0 https://brython.info/ \xa0 brython_stdlib-3.7.0.js \n 因此使用者必須對上述程式庫有些了解後, 再深入研究如何使用\xa0 ggame 程式庫開發專案套件. \n 目前的 spacewar:\xa0 http://mde.tw/webgame/spacewar.html \n \n Ggame Documentation \n https://ggame.readthedocs.io/en/latest/introduction.html \xa0 \n https://github.com/HHS-IntroProgramming/Standards-and-Syllabus/wiki/More-Graphics:-Assets-and-Looping \xa0 \n Ggame is\xa0 not \xa0intended to be a full-featured gaming API, with every bell and whistle. It is designed primarily as a tool for teaching computer programming, recognizing that the ability to create engaging and interactive games is a powerful motivator for many progamming students. Accordingly, any functional or performance enhancements that\xa0 can \xa0be reasonably implemented by the user are left as an exercise. \n Functionality Goals \n The ggame library is intended to be trivially easy to use. For example: \n from ggame import App, ImageAsset, Sprite\n# Create a displayed object at 100,100 using an image asset\nSprite(ImageAsset("bunny.png"), (100,100))\n# Create the app, with a default stage\napp = App()  \n# Run the app\napp.run() \n \n Extensions \n Ggame is being extended for geometry exploration in a manner reminiscent of Geogebra, digital logic simulation, and with tools and classes to use with rocket and orbital simulations. \n \n \n Overview \n There are three major pieces in a ggame app: assets, sprites and the app itself. \n \n Assets \n Asset objects (i.e. \xa0 ImageAsset , etc.) typically represent separate files that are provided by the “art department”. These might be background images, user interface images, or images that represent objects in the game. In addition, \xa0 SoundAsset \xa0 are used to represent sound files (.wav or .mp3 format) that can be played in the game. \n Ggame also extends the asset concept to include graphics that are generated dynamically at run-time, such as geometrical objects, e.g. rectangles, lines, etc. \n \n \n Sprites \n All of the visual aspects of the game are represented by instances of \xa0 Sprite \xa0 or subclasses of it. \n \n \n App \n Every ggame application must create a single instance of the \xa0 App \xa0 class (or a sub-class of it). Create an instance of the \xa0 App \xa0 class to draw a graphics canvas in your browser window. Execute the app’s \xa0 run() \xa0 method to start refreshing and redrawing the visual assets on the screen. \n \n \n Events \n No game is complete without a player and players make events. Your code handles user input by registering to receive keyboard and mouse events using \xa0 listenKeyEvent() \xa0 and \xa0 listenMouseEvent() \xa0 methods of the \xa0 App \xa0 class. \n \n \n \n Execution Environment \n Ggame is designed to execute in a web browser using \xa0 Brython , \xa0 Pixi.js \xa0 and \xa0 Buzz . The easiest way to do this is by executing from \xa0 runpython , with your source code stored at github . When you use ggame from within \xa0 runpython , the Github ggame repository is automatically placed on the import search path. \n \n \n Geometry \n When referring to screen coordinates, note that the x-axis of the computer screen is \xa0 horizontal \xa0 with the zero position on the left hand side of the screen. The y-axis is \xa0 vertical \xa0 with the zero position at the \xa0 top \xa0 of the screen. \n Increasing positive y-coordinates correspond to the downward direction on the computer screen. Note that this is \xa0 different \xa0 from the way you may have learned about x and y coordinates in math class! \n \n Another example: \n from ggame import App, ImageAsset, Sprite, MouseEvent\nfrom random import random, randint\n\nclass Bunny(Sprite):\n    \n    asset = ImageAsset("bunny.png")\n    \n    def __init__(self, position):\n        super().__init__(Bunny.asset, position)\n        # register mouse events\n        App.listenMouseEvent(MouseEvent.mousedown, self.mousedown)\n        App.listenMouseEvent(MouseEvent.mouseup, self.mouseup)\n        App.listenMouseEvent(MouseEvent.mousemove, self.mousemove)\n        self.dragging = False\n\n    \n    def step(self):\n        """\n        Every now and then a bunny hops...\n        """\n        if random() < 0.01:\n            self.x += randint(-20,20)\n            self.y += randint(-20,20)\n        \n        \n    def mousedown(self, event):\n        # capture any mouse down within 50 pixels\n        self.deltax = event.x - (self.x + self.width//2) \n        self.deltay = event.y - (self.y + self.height//2)\n        if abs(self.deltax) < 50 and abs(self.deltay) < 50:\n            self.dragging = True\n            # only drag one bunny at a time - consume the event\n            event.consumed = True\n            \n    def mousemove(self, event):\n        if self.dragging:\n            self.x = event.x - self.deltax - self.width//2\n            self.y = event.y - self.deltay - self.height//2\n            event.consumed = True\n            \n    def mouseup(self, event):\n        if self.dragging:\n            self.dragging = False\n            event.consumed = True\n            \n        \nclass DemoApp(App):\n    \n    def __init__(self):\n        super().__init__()\n        for i in range(10):\n            Bunny((randint(50,self.width),randint(50,self.height)))\n        \n    def step(self):\n        """\n        Override step to perform action on each frame update\n        """\n        for bunny in self.spritelist:\n            bunny.step()\n\n\n# Create the app\napp = DemoApp()  \n# Run the app\napp.run() \n 特別注意 \n https://help.github.com/articles/files-that-start-with-an-underscore-are-missing/ \xa0 \n 因為 Github Pages 內建無視以 _ 開頭的檔案, 而 Brython 在導入模組時, 必須能夠擷取模組目錄下的 __init__.py, 因此必須設定\xa0_config.yml 檔案, 指定 Github Pages 建立頁面時, 必須包含 static/ggame 目錄下的 __init__.py 檔案. \n _config.yml 設定檔案內容為: \n include: [static/ggame, __init__.py] \n 根據以上資訊所建立的網際互動程式範例倉儲: \n https://github.com/mdecourse/kmolgame \xa0 \n 程式網頁: \n http://mde.tw/kmolgame/ \n http://mde.tw/kmolgame/bunny.html \xa0 \n', 'tags': '', 'url': '網際模擬程式.html'}, {'title': 'Spacegame', 'text': '來源: \n https://github.com/HHS-IntroProgramming/Standards-and-Syllabus/wiki/Advanced-Graphics-with-Classes \xa0 \n 參考: \n https://github.com/tiggerntatie/brython-server \xa0 \n \n For this tutorial, return to your ggame-tutorials repository that you forked earlier. Create a new file called tutorial4.py and paste the following code into it to get started: \n from ggame import App, RectangleAsset, ImageAsset, Sprite, LineStyle, Color, Frame\n\nmyapp = App()\n\n# Background\nblack = Color(0, 1)\nnoline = LineStyle(0, black)\nbg_asset = RectangleAsset(myapp.width, myapp.height, noline, black)\nbg = Sprite(bg_asset, (0,0))\n\nmyapp.run() \n This snippet should look familiar, as it is a "cut down" version of the last tutorial that you worked on (tutorial3.py). Notice that we have removed the step function entirely. In this tutorial, we will add the step function back, but in an entirely different way! \n Create a New App Class \n For the first part of this tutorial, we would like to customize the behavior of the standard App class by creating an entirely new application class called MyApp that inherits its basic behavior from the standard App class. \n Paste the following snippet in just before the myapp = ... line: \n class SpaceGame(App):\n    """\n    Tutorial4 space game example.\n    """\n    def __init__(self):\n        super().__init__() \n Then cut the four lines that create the background and paste them in below the super()... line and indent them to match. Finally, change the parts that say myapp.width and myapp.height to be self.width and self.height, respectively. Now your new piece of code should look like this: \n class SpaceGame(App):\n    """\n    Tutorial4 space game example.\n    """\n    def __init__(self):\n        super().__init__()\n        # Background\n        black = Color(0, 1)\n        noline = LineStyle(0, black)\n        bg_asset = RectangleAsset(self.width, self.height, noline, black)\n        bg = Sprite(bg_asset, (0,0)) \n Yes, you could have pasted this in from the get-go, but I want you to be very clear about where this code is coming from. \n Things to notice about the change: \n \n class SpaceGame(App): \xa0 defines a new \xa0 class , called \xa0 SpaceGame , that \xa0 inherits \xa0 all of the functionality of the standard \xa0 App \xa0 class. \n The next line defines the \xa0 __init__ \xa0 method for the class. In this case it expects no arguments. \n The \xa0 super().__init__(... \xa0 line forces the new SpaceGame class to call the standard App class\' \xa0 __init__ \xa0 function before beginning its own initialization. Always do this if you want your new class to fully inherit the behavior of the parent class. \n Finally, since this code \xa0 initializes \xa0 the game, it makes sense to place the code for creating a black background in the \xa0 __init__ \xa0 method of the game class. \n \n As it stands, your program is broken. To make the new SpaceGame class take effect, we have to \xa0 instantiate \xa0 it instead of instantiating the App class. Change the next to last line of the program from \xa0 \n myapp = App() \xa0 to \xa0 myapp = SpaceGame() . \n Try running the program. You should see a black background. \n Create a New Sprite Class \n Just above your SpaceGame class definition, paste this new code: \n class SpaceShip(Sprite):\n    """\n    Animated space ship\n    """\n    asset = ImageAsset("images/four_spaceship_by_albertov_with_thrust.png", \n        Frame(227,0,65,125), 4, \'vertical\')\n\n    def __init__(self, position):\n        super().__init__(SpaceShip.asset, position) \n Run your program. It should not do anything different from before. Creating a new Sprite \xa0 class \xa0 does not actually create any sprites. All it does is create a \xa0 blueprint \xa0 for making sprites. \n Add a single SpaceShip sprite by adding the following line to the end of the SpaceGame \xa0 __init__ method (properly indented, of course): \n SpaceShip((100,100)) \n Now run your code. Cool. Try adding a few more SpaceShip instances at the end of your SpaceGame\xa0 __init__ \xa0method: \n         SpaceShip((150,150))\n        SpaceShip((200,50)) \n It looks like you are building a fleet! \n The code we added is very simple, but there is one line that needs some explanation: \n     asset = ImageAsset("images/four_spaceship_by_albertov_with_thrust.png", \n        Frame(227,0,65,125), 4, \'vertical\') \n The \xa0 asset \xa0 variable is created \xa0 within the class , but outside of any methods. This makes it a \xa0 class attribute that will be available to all \xa0 instances \xa0 of the class. We used this to call the parent Sprite class \xa0 __init__ \xa0 method using the syntax: \xa0 SpaceShip.asset . This approach allows us to create as many instances of the SpaceShip as we want, but without creating multiple assets. There is \xa0 one \xa0 object representing the spaceship image, but \xa0 multiple \xa0 objects representing the sprites. \n This call to create an \xa0 ImageAsset \xa0 has more arguments than we used in the previous tutorial. Here\'s what they are about: \n \n The \xa0 Frame(227,0,65,125) \xa0 argument specifies a rectangular section \xa0 within \xa0 the image file. If you look at the image file in Github you will notice that it actually consists of \xa0 sixteen \xa0 different spacecraft images, some with rocket thrust and some without. The frame arguments refer to the horizontal and vertical location of the upper left hand corner of the sub-image we want (227 and 0 pixels), followed by the width and height of it (65 and 125 pixels). \n The \xa0 4 \xa0 argument means that the asset will actually include \xa0 four \xa0 sub-images of the same size as the first, and... \n The \xa0 \'vertical\' \xa0 argument means that those four images are arranged vertically in the image file. Go back to the github repository and \xa0 look \xa0 at this image file to see what I mean by "four images ... arranged vertically." \n \n All of this additional information means that this asset is ready to\xa0 animate ! It consists of a single spaceship without thrust, and three spaceship images that include a blast of thrust. By selecting which of these\xa0 frames \xa0we want to show at any given time, we can give the appearance of motion within the sprite itself. \n Animate with Step! \n First, let\'s add some attributes to the SpaceShip class. Add the following lines at the end of the SpaceShip class\xa0 __init__ \xa0method: \n         self.vx = 1\n        self.vy = 1\n        self.vr = 0.01 \n These will set an initial horizontal, vertical and rotational velocity. \n Then, add a \xa0 step \xa0 method to the SpaceShip class. This should appear after the SpaceShip class \xa0 __init__ \xa0 method (but leave a space between them): \n     def step(self):\n        self.x += self.vx\n        self.y += self.vy\n        self.rotation += self.vr \n This will just add the velocities to the sprite\'s position attributes, \xa0 x , \xa0 y , and \xa0 rotation , which are built-in attributes of the Sprite class that were automatically \xa0 inherited \xa0 by the SpaceShip class. \n If you are unsure about where to paste these code snippets, check the full listing at the end of this page. \n Unfortunately, just adding a \xa0 step \xa0 method to a sprite class does not mean that it will be called. So we have to add a \xa0 step \xa0 method to the application itself. Add the following code below the \xa0 __init__ \xa0 method of the SpaceGame class (but leave a space between them): \n     def step(self):\n        for ship in self.getSpritesbyClass(SpaceShip):\n            ship.step() \n You are \xa0 expected \xa0 to add a \xa0 step \xa0 method to your own customizations of the standard App class. This \xa0 step \xa0 method \xa0 is \xa0 automatically called with every video frame update in the game. \n This method body uses a \xa0 for \xa0 loop to access every \xa0 instance \xa0 of the SpaceShip class, then calls its \xa0 step \xa0 method ( ship.step() ). Since the SpaceGame \xa0 step \xa0 function is called with every video frame update, this means that every SpaceShip \xa0 step \xa0 function will also be called with every video frame update. \n Changing the Sprite Image \n Now to the animation details. We want the thrust images to animate when the user presses the space key. So here are the things we have to do: \n \n Listen for when the space button is pressed \xa0 down . \n Listen for when the space button is \xa0 released . \n Use the \xa0 step \xa0 method to change the sprite image, depending on whether the space is down or released. \n \n First, let\'s add code for managing the\xa0 state \xa0of the thrusting, and listen for the appropriate keys. Add the following inside the end of the SpaceShip\xa0 __init__ \xa0method: \n         self.thrust = 0\n        self.thrustframe = 1\n        SpaceGame.listenKeyEvent("keydown", "space", self.thrustOn)\n        SpaceGame.listenKeyEvent("keyup", "space", self.thrustOff) \n Then add the\xa0 thrustOn \xa0and\xa0 thrustOff \xa0methods to the SpaceShip class. Add the following immediately after the SpaceShip\xa0 step \xa0method: \n     def thrustOn(self, event):\n        self.thrust = 1\n        \n    def thrustOff(self, event):\n        self.thrust = 0 \n These simple functions will keep track of whether the space key is down (thrust is 1) or up (thrust is 0). \n Finally, add the following inside the end of the SpaceShip \xa0 step \xa0 method: \n         # manage thrust animation\n        if self.thrust == 1:\n            self.setImage(self.thrustframe)\n            self.thrustframe += 1\n            if self.thrustframe == 4:\n                self.thrustframe = 1\n        else:\n            self.setImage(0) \n If \xa0 self.thrust \xa0 is set to 1, it means the space button is depressed and the sprite image is set to whatever \xa0 self.thrustframe \xa0 is (remember we initialized it to 1 in the class \xa0 __init__ \xa0 method). Image number 0 is the first image, 1 is the second, and so on. The next three lines \xa0 increment \xa0 the thrustframe attribute, checking to see if it has gone beyond the end of our list of images (there are only three of them) and setting it back to 1 if necessary. \n Finally, if \xa0 self.thrust \xa0 is set to 0, it means the space button is released, and we should just display the thrustless spaceship image, which is done with \xa0 self.setImage(0) . \n Final Details \n There are many more improvements to make to our game, but these are left as exercises for the student! \n You may have noticed that the spaceship sprites rotate in a very strange way. This is because the default "center" of a sprite is actually its upper left corner. You can change the center by setting the \xa0 fxcenter \xa0 and \xa0 fycenter \xa0 attributes of the Sprite (or in our case the SpaceShip) class. Do this by adding this final line to the SpaceShip \xa0 __init__ \xa0 method: \n         self.fxcenter = self.fycenter = 0.5 \n Run your program again and revel in its awesomeness! \n Find more information about the Sprite and App classes by examining the detailed \xa0 ggame documentation . \n Questions \n \n Extend the tutorial to use the \xa0 \'left arrow\' \xa0 and \xa0 \'right arrow\' \xa0 keys to rotate the ships left and right. \n Extend the tutorial to use the AWSD keys to control the ship motion. \n ADVANCED: Extend the tutorial to create a \xa0 Blast \xa0 sprite that uses the \xa0 blast.png \xa0 image included in the \xa0 /images \xa0 folder. Use the \xa0 \'enter\' \xa0 key to create Blast sprites on the screen at random locations (or "fire" them from the spaceship sprites). \n ADVANCED: Extend the tutorial to animate the \xa0 Blast \xa0 sprite. \n \n Complete Source for the Tutorial \n """\ntutorial4.py\nby E. Dennison\n"""\nfrom ggame import App, RectangleAsset, ImageAsset, Sprite, LineStyle, Color, Frame\n\nclass SpaceShip(Sprite):\n    """\n    Animated space ship\n    """\n    asset = ImageAsset("images/four_spaceship_by_albertov_with_thrust.png", \n        Frame(227,0,65,125), 4, \'vertical\')\n\n    def __init__(self, position):\n        super().__init__(SpaceShip.asset, position)\n        self.vx = 1\n        self.vy = 1\n        self.vr = 0.01\n        self.thrust = 0\n        self.thrustframe = 1\n        SpaceGame.listenKeyEvent("keydown", "space", self.thrustOn)\n        SpaceGame.listenKeyEvent("keyup", "space", self.thrustOff)\n        self.fxcenter = self.fycenter = 0.5\n\n    def step(self):\n        self.x += self.vx\n        self.y += self.vy\n        self.rotation += self.vr\n        # manage thrust animation\n        if self.thrust == 1:\n            self.setImage(self.thrustframe)\n            self.thrustframe += 1\n            if self.thrustframe == 4:\n                self.thrustframe = 1\n        else:\n            self.setImage(0)\n\n    def thrustOn(self, event):\n        self.thrust = 1\n        \n    def thrustOff(self, event):\n        self.thrust = 0\n\n\nclass SpaceGame(App):\n    """\n    Tutorial4 space game example.\n    """\n    def __init__(self):\n        super().__init__()\n        # Background\n        black = Color(0, 1)\n        noline = LineStyle(0, black)\n        bg_asset = RectangleAsset(self.width, self.height, noline, black)\n        bg = Sprite(bg_asset, (0,0))\n        SpaceShip((100,100))\n        SpaceShip((150,150))\n        SpaceShip((200,50))\n\n    def step(self):\n        for ship in self.getSpritesbyClass(SpaceShip):\n            ship.step()\n\n        \nmyapp = SpaceGame()\nmyapp.run() \n', 'tags': '', 'url': 'Spacegame.html'}, {'title': 'Ggame 程式庫', 'text': '專案目的 \n 了解 Ggame 的程式庫內容, 除了建立應用範例外, 並能從\xa0 http://www.pixijs.com/gallery \xa0導入更多功能. \n 在  kmolgame  倉儲中, 自帶\xa0 https://github.com/mdecourse/kmolgame/tree/gh-pages/static/ggame \xa0, 但是\xa0 https://github.com/mdecourse/kmolgame/blob/gh-pages/static/ggame/sysdeps.py \xa0中仍存在從 cdn 下載的特定版本程式碼. \n 因為 Ggame 網際程式庫需要: \n jquery-3.3.1.min.js -\xa0 https://jquery.com/ \xa0 jquery-ui.1.12.1.min.js -\xa0 https://jqueryui.com/ \xa0 pixi-4.8.2.min.js -\xa0 http://www.pixijs.com/ \xa0 \xa0 learning pixi.js buzz-1.2.1.js -\xa0 http://buzz.jaysalvat.com/ \xa0 brython-3.7.0.js -\xa0 https://brython.info/ \xa0 \n 等 Javascript 程式庫, 因此最理想的情況下, 必須持續使用最新版的程式庫. 其中最關鍵的應該是\xa0 http://www.pixijs.com/ \xa0與\xa0 https://brython.info/ \xa0 \n 因此, 以 Ggame 網際程式庫的研究與開發, 必須導入更多的\xa0 http://www.pixijs.com/ \xa0功能, 且能在最新的\xa0 https://brython.info/ \xa0版本中運行. 並且思考能否援導入 Pixi 的相同流程, 導入類似\xa0 http://schteppe.github.io/cannon.js/ \xa0的 Javascript 程式庫. \n Pixi Gallery:\xa0 http://www.pixijs.com/gallery \xa0 \n 目前採用 Ggame 程式庫開發的線上遊戲:\xa0 http://mde.tw/kmolgame/spacewar.html \xa0 \n Games in Pixi.js \n 電子書: Learn Pixi.js\xa0 https://link.springer.com/book/10.1007/978-1-4842-1094-9 \xa0 \n concentration_pixi_game.zip \xa0( ref ,  ref2 ) \n https://ithelp.ithome.com.tw/articles/10190574 \xa0 (Pixijs) \n https://itch.io/games/made-with-pixijs \xa0 \n https://www.themarketingtechnologist.co/creating-a-lightweight-game-using-pixijs/ \xa0', 'tags': '', 'url': 'Ggame 程式庫.html'}, {'title': 'Flaskbb', 'text': 'https://github.com/flaskbb/flaskbb \xa0 \n 納入\xa0 https://github.com/singingwolfboy/flask-dance \xa0 \n', 'tags': '', 'url': 'Flaskbb.html'}, {'title': '工程用計算機', 'text': 'https://github.com/scrum-1/scrum_pyqt5_calculator \xa0 \n 利用 Eric6 IDE 可以開發單機版的 PyQt5 計算機, 或者擴充為工程用的計算機, 但是就目前的工程運算, 這種模擬早期桌上型計算機的程式, 已經沒有太多功用, 反而若能利用 PyQt5 開發一套能與網際伺服器互動的"工程運算環境", 應該會有較大的開發動機. \n 看看能否從\xa0 https://github.com/m2n037/awesome-mecheng \xa0、 http://www.teamtrotbot.com/mechanism.html  、 https://dogfeatherdesign.com/engineering-projects/mechanisms-mechanical-walker/  與  http://507movements.com/  找到值得開發的主題.', 'tags': '', 'url': '工程用計算機.html'}, {'title': 'Flexx', 'text': 'https://github.com/flexxui/flexx \xa0 \n https://flexx.readthedocs.io \xa0 \n \n \n \n', 'tags': '', 'url': 'Flexx.html'}, {'title': '電腦輔助設計', 'text': 'Solid Modeling \n Solid Modeling and Applications - Rapid Prototyping, CAD and CAE Theory:\xa0 https://link.springer.com/book/10.1007/978-3-319-74594-7 \xa0 \n https://github.com/xibyte/jsketcher \xa0 \n Mechanism and Linkage Design \n https://github.com/tmpvar/2d-constraints-bfgs \xa0 \n https://github.com/mimno/jsLBFGS \xa0 ( https://en.wikipedia.org/wiki/Limited-memory_BFGS )\xa0 \n https://github.com/croquelois/bfgs-numericjs \xa0 \n https://github.com/optimization-js/optimization-js \xa0 \n Gear Design \n Advanced Gear Engineering:\xa0 https://link.springer.com/book/10.1007/978-3-319-60399-5 \xa0 \n Computational Design \n Designing with Computational Intelligence:\xa0 https://link.springer.com/book/10.1007/978-3-319-44735-3 \xa0 \n Learn Keras for Deep Neural Networks:\xa0 https://link.springer.com/book/10.1007/978-1-4842-4240-7 \xa0 \n Introduction to Python for Engineers and Scientists:\xa0 https://link.springer.com/book/10.1007/978-1-4842-3204-0 \xa0 \n Artificial Intelligence \n Practical Python AI Projects - Mathematical Models of Optimization Problems with Google OR-Tools:\xa0 https://link.springer.com/book/10.1007/978-1-4842-3423-5 \xa0 \n Deep Learning with Applications Using Python:\xa0 https://link.springer.com/book/10.1007/978-1-4842-3516-4 \xa0 \n Mastering Machine Learning with Python in Six Steps:\xa0 https://link.springer.com/book/10.1007/978-1-4842-2866-1 \xa0 \n Deep Learning with Python:\xa0 https://link.springer.com/book/10.1007/978-1-4842-2766-4 \xa0 \n Object Oriented Modeling \n Modelica Specification 3.4.pdf \n Introduction to Physical Modeling with Modelica:\xa0 https://link.springer.com/book/10.1007/978-1-4615-1561-6 \xa0 \n Bond Graph Modelling of Engineering Systems:\xa0 https://link.springer.com/book/10.1007/978-1-4419-9368-7 \xa0 \n Mechatronics by Bond Graphs An Object-Oriented Approach to Modelling and Simulation:\xa0 https://link.springer.com/book/10.1007/978-3-662-49004-4 \xa0', 'tags': '', 'url': '電腦輔助設計.html'}, {'title': 'Modelica', 'text': 'Modelica is a modern language built on non-causal modeling with mathematical equations and object-oriented constructs to facilitate reuse of modeling knowledge. \n Modelica\xa0supports several formalisms: ordinary differential equations (ODE), differential-algebraic equations (DAE), bond graphs, finite state automata, and Petri nets etc. Modelica is intended to serve as a standard format so that models arising in different domains can be exchanged between tools and users. \n Modelica by Examples:\xa0 http://book.xogeny.com/ \xa0 \n OpenModelica \n https://openmodelica.org/ \xa0 \n OpenModelica user guide:\xa0 https://openmodelica.org/doc/OpenModelicaUsersGuide/OpenModelicaUsersGuide-latest.pdf \xa0 \n Multibond Graph library \n https://github.com/modelica-3rdparty/MultiBondLib \xa0 \n Foundation of Cyber-Physical Systems \n Cyber-physical systems (CPSs) combine cyber capabilities (computation and/or communication) with physical capabilities (motion or other physical processes). Cars, aircraft, and robots are prime examples, because they move physically in space in a way that is determined by discrete computerized control algorithms. Designing these algorithms to control CPSs is challenging due to their tight coupling with physical behavior. At the same time, it is vital that these algorithms be correct, since we rely on CPSs for safety critical tasks like keeping aircraft from colliding. \n http://www.cs.cmu.edu/~aplatzer/course/fcps14/fcps14.pdf \xa0', 'tags': '', 'url': 'Modelica.html'}, {'title': '電腦輔助設計議題', 'text': '六軸機械手臂 \n 利用  Onshape  與  V-rep  驗證  inverse kinematics.pdf  之運算結果 \n IKBT:  https://arxiv.org/pdf/1711.05412.pdf \n Robot Manipulators and Control Systems.pdf \n Kinematic Analysis and Design of 3dof robot.pdf \n Kinematics and Workspace of a 2-Link Planar Manipulator Using Python \n https://sajidnisar.github.io/posts/python_kinematics_dh \n Rigidbody Dynamics \n http://royfeatherstone.org/spatial/ \n Niryo one \n https://niryo.com \xa0 \n https://github.com/NiryoRobotics/niryo_one \xa0 \n \n bom_niryo.pdf \n \n \n Poppy robot \n https://www.poppy-project.org/en/ \xa0 \n https://github.com/poppy-project/pypot \xa0 \n \n 參考連結: \n http://www.coppeliarobotics.com/helpFiles/en/inverseKinematicsTutorial.htm \n http://www.coppeliarobotics.com/helpFiles/en/basicsOnIkGroupsAndIkElements.htm \n http://www.coppeliarobotics.com/helpFiles/en/inverseKinematicsModule.htm \n https://www.cnblogs.com/21207-iHome/p/7420733.html \xa0 \n \n 鋼球運動系統 \n https://github.com/KmolYuan/Pyslvs-PyQt5 \xa0 \n \n \n KLL3PP \n https://github.com/mdecourse/kll3pp \xa0 \n \n 摺疊自行車 \n http://rattlecad.sourceforge.net/ \xa0 \n \n 重力計時器 \n \n \n \n 平面機構模擬 (Geometric Constrain Solver) 應用 \n https://github.com/KmolYuan/python-solvespace \xa0 \n 在近端利用 Msys2 編譯 GCS 動態程式庫, 之後建立 Python 呼叫範例. \n 在 Github 嘗試利用  https://travis-ci.org/ \xa0 進行整合. \n tinycadlib 程式庫研究:\xa0 https://github.com/KmolYuan/pyslvs/blob/master/src/tinycadlib.pyx \xa0 \n 四連桿運動模擬 \n from math import pi, cos, sin, sqrt, acos\nimport matplotlib.pyplot as plt\n \nradian = 180/pi\ndegree = pi/180\n \n#PLAP\ndef plap(ax, ay, ac, bac, bx, by, pos):\n    if pos == 0:\n        cx= ac*cos(bac - acos((ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2 + abs(ax - bx)**2 - abs(ay - by)**2)/(2*sqrt(ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2)*abs(ax - bx)))) + ax \n        cy= ac*sin(bac - acos((ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2 + abs(ax - bx)**2 - abs(ay - by)**2)/(2*sqrt(ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2)*abs(ax - bx)))) + ay\n    else:\n        cx= ac*cos(bac + acos((ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2 + abs(ax - bx)**2 - abs(ay - by)**2)/(2*sqrt(ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2)*abs(ax - bx)))) + ax \n        cy= ac*sin(bac + acos((ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2 + abs(ax - bx)**2 - abs(ay - by)**2)/(2*sqrt(ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2)*abs(ax - bx)))) + ay\n    return cx, cy\n \n#PLLP\ndef pllp(ax, ay, ac, cb, bx, by, pos):\n    if pos == 0:\n        cx =  -((ay - by)*(-ac**2*ay + ac**2*by + ax**2*ay + ax**2*by - 2*ax*ay*bx - 2*ax*bx*by + ay**3 - ay**2*by + ay*bx**2 - ay*by**2 + ay*cb**2 + bx**2*by + by**3 - by*cb**2 - sqrt((-ac**2 + 2*ac*cb + ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2 - cb**2)*(ac**2 + 2*ac*cb - ax**2 + 2*ax*bx - ay**2 + 2*ay*by - bx**2 - by**2 + cb**2))*(ax - bx)) + (ac**2 - ax**2 - ay**2 + bx**2 + by**2 - cb**2)*(ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2))/(2*(ax - bx)*(ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2))\n        cy =  (-ac**2*ay + ac**2*by + ax**2*ay + ax**2*by - 2*ax*ay*bx - 2*ax*bx*by + ay**3 - ay**2*by + ay*bx**2 - ay*by**2 + ay*cb**2 + bx**2*by + by**3 - by*cb**2 + sqrt((-ac**2 + 2*ac*cb + ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2 - cb**2)*(ac**2 + 2*ac*cb - ax**2 + 2*ax*bx - ay**2 + 2*ay*by - bx**2 - by**2 + cb**2))*(-ax + bx))/(2*(ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2))\n    else:\n        cx =  -((ay - by)*(-ac**2*ay + ac**2*by + ax**2*ay + ax**2*by - 2*ax*ay*bx - 2*ax*bx*by + ay**3 - ay**2*by + ay*bx**2 - ay*by**2 + ay*cb**2 + bx**2*by + by**3 - by*cb**2 + sqrt((-ac**2 + 2*ac*cb + ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2 - cb**2)*(ac**2 + 2*ac*cb - ax**2 + 2*ax*bx - ay**2 + 2*ay*by - bx**2 - by**2 + cb**2))*(ax - bx)) + (ac**2 - ax**2 - ay**2 + bx**2 + by**2 - cb**2)*(ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2))/(2*(ax - bx)*(ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2))\n        cy =  (-ac**2*ay + ac**2*by + ax**2*ay + ax**2*by - 2*ax*ay*bx - 2*ax*bx*by + ay**3 - ay**2*by + ay*bx**2 - ay*by**2 + ay*cb**2 + bx**2*by + by**3 - by*cb**2 + sqrt((-ac**2 + 2*ac*cb + ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2 - cb**2)*(ac**2 + 2*ac*cb - ax**2 + 2*ax*bx - ay**2 + 2*ay*by - bx**2 - by**2 + cb**2))*(ax - bx))/(2*(ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2))\n    return cx, cy\n\ndef crank_rocker(angle, p1x, p1y, p2x, p2y, len1, len2, len3, len4, len5):\n    p4x, p4y = plap(p1x, p1y, len1, angle, p2x, p2y, 0)\n    #print("cx=", cx, "cy=", cy)\n    p5x, p5y = pllp(p4x, p4y, len2, len3, p2x, p2y, 0)\n    #print("dx=", dx, "dy=", dy)\n    p3x, p3y = pllp(p4x, p4y, len4, len5, p5x, p5y, 0)\n    #print("ex=", ex, "ey=", ey)\n    return p3x, p3y\n    \n#主程式\nXval  = []\nYval  = []\ninc = 5\n\nfor i in range(0, 360+inc, inc):\n    try:\n        p3x, p3y = crank_rocker(i*degree, 0, 0, 90, 0, 35, 70, 70, 40, 40)\n        Xval += [p3x]\n        Yval += [p3y]\n        print(i, ":", round(p3x, 4), round(p3y, 4))\n    except:\n        pass\nprint ("Solve Completed")\n\nplt.plot(Xval, Yval)\nplt.xlabel(\'x coordinate\')\nplt.ylabel(\'y coordinate\')\n#plt.title("Involute - "+str(degree)+" deg")\nplt.show() \n 上述四連桿運動模擬, 採用 Solvespace GCS 動態連結程式庫執行運算:\xa0 sgcs_2_1_py3.7.1.7z \xa0(使用可攜 Python 3.7.1 進行測試) \n 參考資料 \n https://github.com/AliShug/EvoArm \xa0 \n 進階機構模擬與合成議題 \n 機構之構造合成.pdf \n QUALITATIVE KINEMATICS 專利 \n Automated Configuration Analysis of Planar Eight-Bar Linkages.pdf \n Automated Generation of Linkage Loop Equations for Planar One Degree-of-Freedom Linkages.pdf \n Automated Synthesis of Planar Mechanisms with Revolute, Prismatic and Pin-In-Slot Joints.pdf', 'tags': '', 'url': '電腦輔助設計議題.html'}, {'title': 'Kinematics', 'text': 'Robot dynamics and control.pdf \n Teaching Mechanism Design.pdf \xa0( Pyslvs  能解此類題目?) \n https://raw.githubusercontent.com/petercorke/robotics-toolbox-python/master/robot/kinematics.py \xa0 \n """\nRobot kinematic operations.\n\nPython implementation by: Luis Fernando Lara Tobar and Peter Corke.\nBased on original Robotics Toolbox for Matlab code by Peter Corke.\nPermission to use and copy is granted provided that acknowledgement of\nthe authors is made.\n\n@author: Luis Fernando Lara Tobar and Peter Corke\n"""\n\nfrom numpy import *\nfrom robot.utility import *\nfrom robot.transform import *\nimport jacobian as Jac\nfrom numpy.linalg import norm\nfrom numpy.linalg import pinv\nfrom math import *\n\n\ndef fkine(robot, q):\n    """\n    Computes the forward kinematics for each joint space point defined by C{q}.\n    ROBOT is a robot object.\n\n    For an n-axis manipulator C{q} is an n element vector or an m x n matrix of\n    robot joint coordinates.\n\n    If C{q} is a vector it is interpretted as the generalized joint coordinates, and\n    C{fkine} returns a 4x4 homogeneous transformation for the tool of\n    the manipulator.\n\n    If C{q} is a matrix, the rows are interpretted as the generalized \n    joint coordinates for a sequence of points along a trajectory.  q[i,j] is\n    the j\'th joint parameter for the i\'th trajectory point.  In this case\n    C{fkine} returns a list of matrices for each point\n    along the path.\n\n    The robot\'s base or tool transform, if present, are incorporated into the\n    result.\n    \n    @type robot: Robot instance\n    @param robot: The robot\n    @type q: vector\n    @param q: joint coordinate\n    @see: L{Link}, L{Robot}, L{ikine}\n    """\n\n    q = mat(q)\n    n = robot.n\n    if numrows(q)==1 and numcols(q)==n:\n        t = robot.base\n        for i in range(0,n):\n            t = t * robot.links[i].tr(q[0,i])\n        t = t * robot.tool\n        return t\n    else:\n        if numcols(q) != n:\n            raise \'bad data\'\n        t = []\n        for qv in q:        # for each trajectory point\n            tt = robot.base\n            for i in range(0,n):\n                tt = tt * robot.links[i].tr(qv[0,i])\n            t.append(tt*robot.tool)\n        return t\n\n\n\ndef ikine(robot, tr, q0=None, m=None, **args):\n    """\n    Inverse manipulator kinematics.\n    Computes the joint coordinates corresponding to the end-effector transform C{tr}.\n    Typically invoked as\n\n        - Q = IKINE(ROBOT, T)\n        - Q = IKINE(ROBOT, T, Q)\n        - Q = IKINE(ROBOT, T, Q, M)\n\n    Uniqueness\n    ==========\n    Note that the inverse kinematic solution is generally not unique, and \n    depends on the initial guess C{q} (which defaults to 0).\n\n    Iterative solution\n    ==================\n    Solution is computed iteratively using the pseudo-inverse of the\n    manipulator Jacobian.\n\n    Such a solution is completely general, though much less efficient \n    than specific inverse kinematic solutions derived symbolically.\n\n    This approach allows a solution to obtained at a singularity, but \n    the joint angles within the null space are arbitrarily assigned.\n\n    Operation on a trajectory\n    =========================\n    If C{tr} is a list of transforms (a trajectory) then the solution is calculated\n    for each transform in turn.  The return values is a matrix with one row for each\n    input transform.  The initial estimate for the iterative solution at \n    each time step is taken as the solution from the previous time step.\n\n    Fewer than 6DOF\n    ===============\n    If the manipulator has fewer than 6 DOF then this method of solution\n    will fail, since the solution space has more dimensions than can\n    be spanned by the manipulator joint coordinates.  In such a case\n    it is necessary to provide a mask matrix, C{m}, which specifies the \n    Cartesian DOF (in the wrist coordinate frame) that will be ignored\n    in reaching a solution.  The mask matrix has six elements that\n    correspond to translation in X, Y and Z, and rotation about X, Y and\n    Z respectively.  The value should be 0 (for ignore) or 1.  The number\n    of non-zero elements should equal the number of manipulator DOF.\n\n    For instance with a typical 5 DOF manipulator one would ignore\n    rotation about the wrist axis, that is, M = [1 1 1 1 1 0].\n\n\n    @type robot: Robot instance\n    @param robot: The robot\n    @type tr: homgeneous transformation\n    @param tr: End-effector pose\n    @type q: vector\n    @param q: initial estimate of joint coordinate\n    @type m: vector\n    @param m: mask vector\n    @rtype: vector\n    @return: joint coordinate\n    @see: L{fkine}, L{tr2diff}, L{jacbo0}, L{ikine560}\n    """\n     \n    #solution control parameters\n\n    print \'args\', args\n    \n    n = robot.n\n\n    \n    if q0 == None:\n        q0 = mat(zeros((n,1)))\n    else:\n        q0 = mat(q0).flatten().T\n        \n    if q0 != None and m != None:\n        m = mat(m).flatten().T\n        if len(m)!=6:\n            error(\'Mask matrix should have 6 elements\')\n        if len(m.nonzero()[0].T)!=robot.n:\n            error(\'Mask matrix must have same number of 1s as robot DOF\')\n    else:\n        if n<6:\n            print \'For a manipulator with fewer than 6DOF a mask matrix argument should be specified\'\n        m = mat(ones((6,1)))\n\n    def solve(robot, tr, q, mask, ilimit=1000, stol=1e-6, gamma=1):\n        print ilimit, stol, gamma\n        nm = inf;\n        count = 0\n        while nm > stol:\n            e = multiply( tr2diff(fkine(robot, q.T),tr), mask )\n            #dq = pinv(Jac.jacob0(robot, q.T)) * e\n            dq = Jac.jacob0(robot, q.T).T * e\n            q += gamma*dq;\n            nm = norm(e)\n            count += 1\n            if count > ilimit:\n                error("Solution wouldn\'t converge")\n        print count, \'iterations\'\n        return q;\n\n    if isinstance(tr, list):\n        #trajectory case\n        qt = mat(zeros((0,n)))\n        for T in tr:\n            q = solve(robot, T, q0, m, **args);\n            qt = vstack( (qt, q.T) )\n        return qt;\n    elif ishomog(tr):\n        #single xform case\n        q = solve(robot, tr, q0, m, **args);\n        print q\n        qt = q.T\n        return qt\n    else:\n        error(\'tr must be 4*4 matrix\')\n\n\ndef ikine560(robot, T, configuration=\'\'):\n    """\n    Inverse kinematics for Puma 560-like robot, ie. 6-axis with a spherical wrist.\n\n    The optional C{configuration} argument specifies the configuration of the arm in\n    the form of a string containing one or more of the configuration codes\n       - \'l\' or \'r\'    lefty/righty\n       - \'u\' or \'d\'    elbow\n       - \'n\' or \'f\'    wrist flip or noflip.\n\n    The default configuration is \'lun\'.\n    \n    Reference\n    =========\n\n    Inverse kinematics for a PUMA 560 based on the equations by Paul and Zhang\n    From The International Journal of Robotics Research\n    Vol. 5, No. 2, Summer 1986, p. 32-44.\n\n    @author: Robert Biro (gt2231a@prism.gatech.edu) with Gary Von McMurray, GTRI/ATRP/IIMB, Georgia Institute of Technology, 2/13/95.\n\n    @type robot: Robot instance\n    @param robot: The robot\n    @type T: homgeneous transformation\n    @param T: End-effector pose\n    @type configuration: string\n    @param configuration: manipulator configuration comprising the letters: lrudnf\n    @rtype: vector\n    @return: joint coordinate\n    """\n\n    if robot.n != 6:\n        error(\'Solution only applicable for 6DOF manipulator\');\n\n    if robot.mdh:\n        error(\'Solution only applicable for standard DH conventions\');\n\n\n    # recurse over a list of transforms\n    if isinstance(T, list):\n        theta = [];\n        for t in T:\n            theta.append( ikine560(robot, t, configuration) );\n\n        return theta;\n\n    if not ishomog(T):\n        error(\'T is not a homog xform\');\n        \n    L = robot.links;\n    a1 = L[0].A;\n    a2 = L[1].A;\n    a3 = L[2].A;\n\n    for i in range(3, 6):\n        if L[i].A != 0:\n            error(\'wrist is not spherical\')\n\n    d1 = L[0].D;\n    d2 = L[1].D;\n    d3 = L[2].D;\n    d4 = L[3].D;\n\n\n    # undo base transformation\n    T = linalg.inv(robot.base) * T;\n\n    # The following parameters are extracted from the Homogeneous \n    # Transformation as defined in equation 1, p. 34\n\n    Ox = T[0,1];\n    Oy = T[1,1];\n    Oz = T[2,1];\n\n    Ax = T[0,2];\n    Ay = T[1,2];\n    Az = T[2,2];\n\n    Px = T[0,3];\n    Py = T[1,3];\n    Pz = T[2,3];\n\n    # The configuration parameter determines what n1,n2,n4 values are used\n    # and how many solutions are determined which have values of -1 or +1.\n\n    configuration = configuration.lower();\n\n    n1 = -1;    # L\n    n2 = -1;    # U\n    n4 = -1;    # N\n    if \'l\' in configuration:\n        n1 = -1;\n\n    if \'r\' in configuration:\n        n1 = 1;\n\n    if \'u\' in configuration:\n        if n1 == 1:\n            n2 = 1;\n        else:\n            n2 = -1;\n\n    if \'d\' in configuration:\n        if n1 == 1:\n            n2 = -1;\n        else:\n            n2 = 1;\n\n    if \'n\' in configuration:\n        n4 = 1;\n\n    if \'f\' in configuration:\n        n4 = -1;\n\n\n    theta = zeros( (6,1) );\n    \n    #\n    # Solve for theta(1)\n    # \n    # r is defined in equation 38, p. 39.\n    # theta(1) uses equations 40 and 41, p.39, \n    # based on the configuration parameter n1\n    #\n\n    r = sqrt(Px**2 + Py**2);\n    if n1 == 1:\n        theta[0] = atan2(Py,Px) + asin(d3/r);\n    else:\n        theta[0] = atan2(Py,Px) + pi - asin(d3/r);\n\n\n    #\n    # Solve for theta(2)\n    #\n    # V114 is defined in equation 43, p.39.\n    # r is defined in equation 47, p.39.\n    # Psi is defined in equation 49, p.40.\n    # theta(2) uses equations 50 and 51, p.40, based on the configuration \n    # parameter n2\n    #\n\n    V114 = Px*cos(theta[0]) + Py*sin(theta[0]);\n    r = sqrt(V114**2 + Pz**2);\n\n    x = (a2**2-d4**2-a3**2+V114**2+Pz**2) / (2.0*a2*r);\n    if abs(x) > 1:\n        error(\'point not reachable\');\n    Psi = acos(x);\n\n    theta[1] = atan2(Pz,V114) + n2*Psi;\n\n    #\n    # Solve for theta(3)\n    #\n    # theta(3) uses equation 57, p. 40.\n    #\n\n    num = cos(theta[1])*V114+sin(theta[1])*Pz-a2;\n    den = cos(theta[1])*Pz - sin(theta[1])*V114;\n    theta[2] = atan2(a3,d4) - atan2(num, den);\n\n    #\n    # Solve for theta(4)\n    #\n    # V113 is defined in equation 62, p. 41.\n    # V323 is defined in equation 62, p. 41.\n    # V313 is defined in equation 62, p. 41.\n    # theta(4) uses equation 61, p.40, based on the configuration \n    # parameter n4\n    #\n\n    V113 = cos(theta[0])*Ax + sin(theta[0])*Ay;\n    V323 = cos(theta[0])*Ay - sin(theta[0])*Ax;\n    V313 = cos(theta[1]+theta[2])*V113 + sin(theta[1]+theta[2])*Az;\n    theta[3] = atan2((n4*V323),(n4*V313));\n    #[(n4*V323),(n4*V313)]\n\n    #\n    # Solve for theta(5)\n    #\n    # num is defined in equation 65, p. 41.\n    # den is defined in equation 65, p. 41.\n    # theta(5) uses equation 66, p. 41.\n    #\n     \n    num = -cos(theta[3])*V313 - V323*sin(theta[3]);\n    den = -V113*sin(theta[1]+theta[2]) + Az*cos(theta[1]+theta[2]);\n    theta[4] = atan2(num,den);\n    #[num den]\n\n    #\n    # Solve for theta(6)\n    #\n    # V112 is defined in equation 69, p. 41.\n    # V122 is defined in equation 69, p. 41.\n    # V312 is defined in equation 69, p. 41.\n    # V332 is defined in equation 69, p. 41.\n    # V412 is defined in equation 69, p. 41.\n    # V432 is defined in equation 69, p. 41.\n    # num is defined in equation 68, p. 41.\n    # den is defined in equation 68, p. 41.\n    # theta(6) uses equation 70, p. 41.\n    #\n\n    V112 = cos(theta[0])*Ox + sin(theta[0])*Oy;\n    V132 = sin(theta[0])*Ox - cos(theta[0])*Oy;\n    V312 = V112*cos(theta[1]+theta[2]) + Oz*sin(theta[1]+theta[2]);\n    V332 = -V112*sin(theta[1]+theta[2]) + Oz*cos(theta[1]+theta[2]);\n    V412 = V312*cos(theta[3]) - V132*sin(theta[3]);\n    V432 = V312*sin(theta[3]) + V132*cos(theta[3]);\n    num = -V412*cos(theta[4]) - V332*sin(theta[4]);\n    den = - V432;\n    theta[5] = atan2(num,den);\n    #[num den]\n    \n    return mat(theta).T; \n IKBT \n https://github.com/uw-biorobotics/IKBT \xa0 \n Solving closed-form Inverse Kinematics with Behavior Tree.pdf \n', 'tags': '', 'url': 'Kinematics.html'}, {'title': 'Inverse Kinematics', 'text': '參考頁面: \n http://www.coppeliarobotics.com/helpFiles/en/inverseKinematicsTutorial.htm \xa0 \n 運動學 (Kinematics) \n Kinematics is a branch of classical mechanics that describes the motion of points, bodies (objects), and systems of bodies (groups of objects) without considering the forces that caused the motion. \n 逆運動學 (Inverse Kinematics) \n The problem of IK can be seen as the one of finding the joint values corresponding to some specific position and/or orientation of a given body element (generally the end effector). \n More generally, it is a transformation from the task space coordinates (任務空間座標) into the joint space coordinates (連接軸空間座標). For a serial manipulator for instance, the problem would be to find the value of all joints in the manipulator given the position (and/or orientation) of the end effector. The inverse problem - finding the end effector position given the joint values - is referred to as FK problem and is often perceived as an easier task than IK. This is surely true when dealing with open kinematic chains, but does not hold true for general type mechanical configurations. \n V-rep External Kinematics \n http://www.coppeliarobotics.com/helpFiles/en/externalIk.htm \xa0 \n Two-link Inverse Kinematics.7z \n V-rep Custom UI \n http://www.coppeliarobotics.com/helpFiles/en/customUIPlugin.htm \xa0 \n', 'tags': '', 'url': 'Inverse Kinematics.html'}, {'title': '設計主機', 'text': '自架主機 \n 工作站室 Ubuntu + Flask + Fossil SCM \n 協同設計室 Ubuntu\xa0+ Flask + Fossil SCM \n 雲端主機 \n Heroku 雲端主機 Flask \n Github 倉儲主機 Html + Javascript + Brython \n Gitlab 倉儲主機\xa0Html + Javascript + Brython \n Bitbucket 倉儲主機\xa0Html + Javascript + Brython \n \n', 'tags': '', 'url': '設計主機.html'}, {'title': 'Heroku 簡介', 'text': '\n \n \n', 'tags': '', 'url': 'Heroku 簡介.html'}, {'title': 'Heroku 設定', 'text': '在  http://mde.tw \xa0相關課程中,  Heroku \xa0 雲端服務與 Github 倉儲中的  Github Pages  分別扮演動態程式網站與靜態超文件網站伺服. \n 此地所謂的動態程式網站伺服, 指的是利用  Flask  程式框架, 建立  Web Server Gateway\xa0 Interface  架構的程式環境. \n 而靜態超文件網站伺服, 則包含一個  WWW  伺服器, 得以讓使用者透過瀏覽器, 擷取伺服器上的  html  與  JavaScript  程式, 且  JavaScript  是下載到近端之後, 使用近端的硬體執行. \n 以下說明如何在近端利用可攜  Heroku cli  建立能與  Github  倉儲同步的動態雲端網站. \n 在 Heroku 登記一個帳號 \n 利用電子郵箱, 在\xa0 https://www.heroku.com/ \xa0登記一個免費帳號, 在完成電子郵箱驗證後, 即可進入 Dashboard 新增一個應用程式.\xa0 而該應用程式名稱必須具備唯一性, 因為完成後, 即可建立 "應用程式名稱".herokuapp.com 網站. \n 接著進入該應用程式對應的 Settings 頁面, 可以查詢該應用程式的 git 倉儲對應 URL, 以及應用程式的網站名稱. \n 接下來, 則必須在可攜程式系統中配置  Heroku cli  環境, 以便利用 heroku login, heroku logs 等指令, 登入  Heroku  系統, 取得 git clone 與 push 或 pull 權限. \n 但是在此處, 隨後將在應用程式對應的 Deploy, 以 auto deploy 的自動部署, 讓特定的 Github repository 與  Heroku  的應用程式倉儲自動同步, 多人協同下的 Github 倉儲一旦改版,  Heroku  動態網站將會自動保持同步. \n 新增可攜 Heroku cli 客戶端 \n 下載 Heroku cli 可攜客戶端:  heroku/7.18.9 win32-x64 node-v11.1.0 \n 將檔案在 y:\\ 中解開壓縮後, 修改 path 設定, 納入 %Disk%:\\heroku\\bin, 以便在隨身系統中執行 heroku cli 指令. \n 利用 runtime.txt 指定 Python 版本 \n runtime.txt 指定 Python 執行版本: \n python-3.7.1 \n 利用 Procfile 指定啟動程式物件 \n Procfile 宣告由 flaskapp.py 中的 app 執行動態程式: \n web gunicorn flaskapp:app \n 利用 requirements.txt 安裝所需模組 \n requirements.txt 宣告執行動態程式所需要安裝的模組: \n Flask==1.0.2\ngunicorn==19.7.1\nJinja2==2.10\nMarkupSafe==1.0\nWerkzeug==0.14.1\nbeautifulsoup4==4.6.0 \n 在 Heroku Deploy 頁面設定與 Github 倉儲自動同步 \n \n 設定完成後的動態網頁:\xa0 http://cp2018-bgx.herokuapp.com/ \xa0 \n 靜態網頁:\xa0 https://mdecp2018.github.io/finalproject-bgx \xa0 \n 可用於多人協同的 Github 倉儲:\xa0 https://github.com/mdecp2018/finalproject-bgx \xa0 \n', 'tags': '', 'url': 'Heroku 設定.html'}, {'title': 'Fossil SCM', 'text': 'https://fossil-scm.org \xa0 \n http://mde.tw/2017springcd/blog/intro-fossil-scm.html \xa0 \n http://mde.tw/2017springwcm/blog/2017spring-ubuntu-stunnel-fossil.html \xa0 \n', 'tags': '', 'url': 'Fossil SCM.html'}, {'title': 'Jupyterlab', 'text': 'https://github.com/jupyterlab/jupyterlab \n', 'tags': '', 'url': 'Jupyterlab.html'}, {'title': 'Sandstorm', 'text': 'https://github.com/sandstorm-io/sandstorm \xa0 \n', 'tags': '', 'url': 'Sandstorm.html'}, {'title': 'Python 程式', 'text': '參考: \n https://jeffknupp.com/blog/2013/08/16/open-sourcing-a-python-project-the-right-way/ \xa0 \n 從基本語法到 GUI 程式 \n https://pythonspot.com/ \xa0 \n 整理\xa0 https://www.cs.cmu.edu/~112/schedule.html \xa0中的 內容. \n 結合既有 C/C++ 程式 \n 從  SWIG  到  AutoWIG , 使用者可以將既有的 C/C++ 程式庫轉成可為 Python 程式呼叫的動態連結程式庫. \n 也可以利用  Cython  技術提升 Python 程式效能. \n SWIG  範例: \n AutoWIG \xa0介紹: \n AutoWIG: Automatic Generation of Python Bindings for C++ Libraries.pdf \n AutoWIG - automatic generation of python bindings for C++ libraries2.pdf \n \n Cython  範例: \n \n \n \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["py_src"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n 開始練習 print() 用法, 並著手建立函式 \n  印出版次與關鍵字程式  \n \n \n \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n Filename:  .py   \n Run   Output   清除 \n \n  ****************************** keyword start  \n \n \n  ****************************** keyword end  \n  ***************************** slide ex1 start  \n \n \n \n  ***************************** slide ex1 end  \n  ***************************** slide ex2 start  \n \n \n \n  ***************************** slide ex2 end  \n  ***************************** slide ex3 start  \n \n \n \n  ***************************** slide ex3 end  \n  ***************************** slide ex4 start  \n \n \n \n  ***************************** slide ex4 end  \n Keyword Ex1 Ex2 Ex3 Ex4', 'tags': '', 'url': 'Python 程式.html'}, {'title': '靜態網站範例', 'text': 'Brython \n https://groups.google.com/forum/#!forum/brython \xa0 \n https://github.com/mdecourse/webgame \xa0 \n http://mde.tw/webgame/spacewar.html \xa0 \n http://mde.tw/reeborg2016/reeborg.html?lang=en&mode=python \xa0 \n', 'tags': '', 'url': '靜態網站範例.html'}, {'title': '動態網站範例', 'text': 'https://github.com/mdecourse/wcms-scrum1 \xa0 \n 從計算機程式 (Computer Programming) 到電腦輔助機械設計(Computer Aided Mechanical Design) \n 猜數字遊戲:  https://wcms-scrum1.herokuapp.com/ \xa0 \n 2D 國旗繪圖:  https://wcms-scrum1.herokuapp.com/drawflag \xa0 \n 2D 五芒星繪圖:  https://wcms-scrum1.herokuapp.com/drawstar \xa0 \n 2D 曲線繪圖加滑鼠操作:  https://wcms-scrum1.herokuapp.com/drag \xa0 \n 正齒輪齒面寬設計:  https://wcms-scrum1.herokuapp.com/gear_index \xa0 \n', 'tags': '', 'url': '動態網站範例.html'}, {'title': 'GUI 程式範例', 'text': 'Leo Editor \n https://groups.google.com/forum/#!forum/leo-editor \xa0 \n https://github.com/flexxui/pscript \xa0 \n https://github.com/flexxui/flexx \xa0 \n https://github.com/kmolab/pymcadp \xa0 \n https://github.com/goldsborough/Writer-Tutorial \xa0 ( https://www.binpress.com/building-text-editor-pyqt-1/ )\xa0 \n https://github.com/mfitzp/15-minute-apps \xa0 \n https://github.com/Ultimaker/Cura \xa0 \n https://github.com/maicss/PyQt5-Chinese-tutoral \xa0 \n https://github.com/skinex/CRUD-SQLite- \xa0 \n https://github.com/LewisTian/PyQt5-Apps \xa0 \n', 'tags': '', 'url': 'GUI 程式範例.html'}, {'title': 'GUI 程式碼', 'text': '擷取網站 html 檔案 \n def render(url):\n    """Fully render HTML, JavaScript and all."""\n\n    import sys\n    from PyQt5.QtCore import QEventLoop,QUrl\n    from PyQt5.QtWidgets import QApplication\n    from PyQt5.QtWebEngineWidgets import QWebEngineView\n\n    class Render(QWebEngineView):\n        def __init__(self, url):\n            self.html = None\n            self.app = QApplication(sys.argv)\n            QWebEngineView.__init__(self)\n            self.loadFinished.connect(self._loadFinished)\n            self.load(QUrl(url))\n            while self.html is None:\n                self.app.processEvents(QEventLoop.ExcludeUserInputEvents | QEventLoop.ExcludeSocketNotifiers | QEventLoop.WaitForMoreEvents)\n            self.app.quit()\n\n        def _callable(self, data):\n            self.html = data\n\n        def _loadFinished(self, result):\n            self.page().toHtml(self._callable)\n\n    return Render(url).html\n\ndummy_url = "http://mde.tw/"\nprint(render(dummy_url)) \n 顯示網站內容 \n # coding: utf-8\n\nimport sys\nimport os\n\nfrom PyQt5 import (\n    QtCore, \n    QtWidgets, \n    QtWebEngineWidgets\n)\n\napp = QtWidgets.QApplication(sys.argv)\nview = QtWebEngineWidgets.QWebEngineView()\n\n\'\'\'\nview.load(QtCore.QUrl().fromLocalFile(\n    os.path.split(os.path.abspath(__file__))[0]+r\'\\html\\test.html\'\n))\n\'\'\'\nview.load(QtCore.QUrl("http://mde.tw"))\n\nview.show()\nsys.exit(app.exec()) \n \n', 'tags': '', 'url': 'GUI 程式碼.html'}, {'title': 'parse_content 範例', 'text': '電子書: Website Scraping with Python Using BeautifulSoup and Scrapy\xa0 https://link.springer.com/book/10.1007/978-1-4842-3925-4 \xa0 \n import os\nimport bs4\n\ndef _remove_h123_attrs(soup):\n    tag_order = 0\n    for tag in soup.find_all([\'h1\', \'h2\', \'h3\']):\n        # 假如標註內容沒有字串\n        #if len(tag.text) == 0:\n        if len(tag.contents) ==0:\n            # 且該標註為排序第一\n            if tag_order == 0:\n                tag.string = "First"\n            else:\n                # 若該標註非排序第一, 則移除無內容的標題標註\n                tag.extract()\n        # 針對單一元件的標題標註\n        elif len(tag.contents) == 1:\n            # 若內容非為純文字, 表示內容為其他標註物件\n            if tag.get_text() == "":\n                # 且該標註為排序第一\n                if tag_order == 0:\n                    # 在最前方插入標題\n                    tag.insert_before(soup.new_tag(\'h1\', \'First\'))\n                else:\n                    # 移除 h1, h2 或 h3 標註, 只留下內容\n                    tag.replaceWithChildren()\n            # 表示單一元件的標題標註, 且標題為單一字串者\n            else:\n                # 判定若其排序第一, 則將 tag.name 為 h2 或 h3 者換為 h1\n                if tag_order == 0:\n                    tag.name = "h1"\n            # 針對其餘單一字串內容的標註, 則保持原樣\n        # 針對內容一個以上的標題標註\n        #elif len(tag.contents) > 1:\n        else:\n            # 假如該標註內容長度大於 1\n            # 且該標註為排序第一\n            if tag_order == 0:\n                # 先移除 h1, h2 或 h3 標註, 只留下內容\n                #tag.replaceWithChildren()\n                # 在最前方插入標題\n                tag.insert_before(soup.new_tag(\'h1\', \'First\'))\n            else:\n                # 只保留標題內容,  去除 h1, h2 或 h3 標註\n                # 為了與前面的內文區隔, 先在最前面插入 br 標註\n                tag.insert_before(soup.new_tag(\'br\'))\n                # 再移除非排序第一的 h1, h2 或 h3 標註, 只留下內容\n                tag.replaceWithChildren()\n        tag_order = tag_order + 1\n\n    return soup\n\ndef file_get_contents(filename):\n    # open file in utf-8 and return file content\n    with open(filename, encoding="utf-8") as file:\n        return file.read()\n\ndef parse_content():\n    """use bs4 and re module functions to parse content.htm"""\n    config_dir = "./"\n    # if no content.htm, generate a head 1 and content 1 file\n    if not os.path.isfile(config_dir+"content.htm"):\n        # create content.htm if there is no content.htm\n        File = open(config_dir + "content.htm", "w", encoding="utf-8")\n        File.write("<h1>head 1</h1>content 1")\n        File.close()\n    subject = file_get_contents(config_dir+"content.htm")\n    # deal with content without content\n    if subject == "":\n        # create content.htm if there is no content.htm\n        File = open(config_dir + "content.htm", "w", encoding="utf-8")\n        File.write("<h1>head 1</h1>content 1")\n        File.close()\n        subject = "<h1>head 1</h1>content 1"\n    # initialize the return lists\n    head_list = []\n    level_list = []\n    page_list = []\n    # make the soup out of the html content\n    soup = bs4.BeautifulSoup(subject, \'html.parser\')\n    # 嘗試解讀各種情況下的標題\n    soup = _remove_h123_attrs(soup)\n    # 改寫 content.htm 後重新取 subject\n    with open(config_dir + "content.htm", "wb") as f:\n        f.write(soup.encode("utf-8"))\n    subject = file_get_contents(config_dir+"content.htm")\n    # get all h1, h2, h3 tags into list\n    htag= soup.find_all([\'h1\', \'h2\', \'h3\'])\n    n = len(htag)\n    # get the page content to split subject using each h tag\n    temp_data = subject.split(str(htag[0]))\n    if len(temp_data) > 2:\n        subject = str(htag[0]).join(temp_data[1:])\n    else:\n        subject = temp_data[1]\n    if n >1:\n            # i from 1 to i-1\n            for i in range(1, len(htag)):\n                head_list.append(htag[i-1].text.strip())\n                # use name attribute of h* tag to get h1, h2 or h3\n                # the number of h1, h2 or h3 is the level of page menu\n                level_list.append(htag[i-1].name[1])\n                temp_data = subject.split(str(htag[i]))\n                if len(temp_data) > 2:\n                    subject = str(htag[i]).join(temp_data[1:])\n                else:\n                    subject = temp_data[1]\n                # cut the other page content out of htag from 1 to i-1\n                cut = temp_data[0]\n                # add the page content\n                page_list.append(cut)\n    # last i\n    # add the last page title\n    head_list.append(htag[n-1].text.strip())\n    # add the last level\n    level_list.append(htag[n-1].name[1])\n    temp_data = subject.split(str(htag[n-1]))\n    # the last subject\n    subject = temp_data[0]\n    # cut the last page content out\n    cut = temp_data[0]\n    # the last page content\n    page_list.append(cut)\n    return head_list, level_list, page_list\n\nprint(parse_content()) \n', 'tags': '', 'url': 'parse_content 範例.html'}, {'title': '輔助設計', 'text': '電腦輔助機械設計流程自從 Onshape 推出全雲端輔助設計套件後, 理應產生巨大變化, 但是我們感受到了嗎? \n https://www.onshape.com/cad-blog/who-screwed-up-my-model \xa0 \n https://www.colabsoftware.com/post/is-the-future-of-cad-in-the-cloud \xa0 \n https://www10.mcadcafe.com/blogs/jeffrowe/2018/11/01/altair-acquires-simsolid/ \xa0 \n http://www.cadalyst.com/cloud-based-cad/onshape-extends-cloud-based-cad-enterprise-part-1-41681 \xa0 \n https://www.engineering.com/DesignSoftware/DesignSoftwareArticles/ArticleID/17105/CAD-in-the-Cloud-is-Now.aspx \xa0', 'tags': '', 'url': '輔助設計.html'}, {'title': 'Onshape', 'text': '能否採用協同編輯的模式, 將\xa0 http://mde.tw/cadp2018/content/OnshapeWeek%201.html \xa0中的內容, 以中英文並列的方式, 轉換為 html 與 pdf 電子書格式? \n Onshape 自學教材 \n Onshape Video library:\xa0 https://www.onshape.com/videos \xa0 \n https://cad.onshape.com/FsDoc/ \xa0 \n https://www.onshape.com/features/custom-features \xa0 \n http://cadlab.mde.tw/post/tag/featurescript.html \xa0 \n http://cadlab.mde.tw/post/onshape-featurescript-cheng-shi-yu-yan.html \xa0 \n https://github.com/dcowden/featurescript \xa0', 'tags': '', 'url': 'Onshape.html'}, {'title': 'V-rep', 'text': 'http://www.coppeliarobotics.com/ \xa0 \n User Manual \n http://www.coppeliarobotics.com/helpFiles/index.html \xa0 \n Forum \n http://www.forum.coppeliarobotics.com/ \xa0 \n', 'tags': '', 'url': 'V-rep.html'}, {'title': 'report', 'text': '本報告採用 report 目錄中的 markdown 目錄的 .md 檔案, 利用  pandoc  與  MiKTeX  製作完成. \n KMOL 可攜  pandoc 與 MiKTeX.7z \n 期末報告 \n https://mdecp2018.github.io/finalproject-bgx/report/pdf/report.pdf', 'tags': '', 'url': 'report.html'}, {'title': '電子書', 'text': 'Planning Algorithm:\xa0 http://planning.cs.uiuc.edu/ \xa0 \n planning_algorithm.pdf \n basics of robotics.pdf \n elements of robotics.pdf \n industrial robotics.pdf \n next generation robotics.pdf \n modern robotics:\xa0 http://hades.mech.northwestern.edu/index.php/Modern_Robotics \xa0 \n 參考 \n https://hp.kmol.info:8443 \xa0', 'tags': '', 'url': '電子書.html'}, {'title': '協同編輯', 'text': '在  CMSimfly  架構下導入: \n https://github.com/mdecourse/markx \xa0\xa0(for Python 2.7?) \n https://www.cdxy.me/?p=719 \xa0 \n 或者採用  node.js  技術:\xa0 https://github.com/joemccann/dillinger \xa0 \n 已經很自由開放的方案 \n LaTeX \n https://miktex.org/download \xa0(下載 portable 版本) \n https://miktex.org/howto/portable-edition \xa0 \n https://tex.stackexchange.com/questions/13649/portable-minimal-distribution/357713 \xa0 \n Pandoc \n https://github.com/jgm/pandoc \xa0 \n 下載 Windows 64 位元 portable 版本: \n https://github.com/jgm/pandoc/releases/tag/2.5 \xa0 \n \n 越來越自由開放的方案 \n MS Word \n https://bit.ly/2KzIMGF \xa0 \n https://bit.ly/2DYXrdY \xa0 \n https://bit.ly/2PUNBAd \xa0', 'tags': '', 'url': '協同編輯.html'}, {'title': 'Kmol-editor', 'text': 'https://github.com/KmolYuan/kmol-editor \xa0是一個輕量的工程用編輯器, 主要用來開發自己 (意即以 kmol-editor 開發 kmol-editor), 以及應用於協同 Markdown 文件編輯, 可結合  Pandoc  與  MikTeX , 將 Markdown 資料轉換為 html 與 pdf 或 epub 格式. \n http://lab.kmol.info \xa0 目前使用可攜  miktex_portable_and_pandoc.7z , 使用者下載後與先前的 Python 可攜系統結合, 在原有的 start.bat 啟動批次檔案中的 path 設定, 加入: \n %Disk%:\\pandoc-2.4-windows-x86_64;%Disk%:\\miktex_portable\\texmfs\\install\\miktex\\bin; \n 重新啟動後, 即可利用 pandoc 指令與 xelatex 將 Markdown 資料轉為 pdf 文件. \n 此外, 若配合\xa0 https://github.com/KmolYuan/kmolbook-paper \xa0倉儲, 用於建立課程專題報告、學位論文或期刊論文等, 則需要額外以下列指令: \n python -m pip install pandoc-fignos pandoc-tablenos pandoc-eqnos \n 安裝\xa0 pandoc-fignos ,  pandoc-tablenos  與  pandoc-eqnos  等模組. \n 過程中, 還必須透過 MikTeX Package Manager 安裝: \n tex\\latex\\catoptions\\catoptions.sty tex\\latex\\fancyhdr\\fancyhdr.sty tex\\latex\\xwatermark\\xwatermark.sty tex\\latex\\ltxkeys\\ltxkeys.sty tex\\latex\\ms\\everyshi.sty tikz.sty tex\\latex\\xcolor\\xcolor.sty \n 等 packages. \n', 'tags': '', 'url': 'Kmol-editor.html'}, {'title': 'Leo-editor', 'text': 'Kmolreport 使用說明影片: \n \n https://github.com/leo-editor/leo-editor \xa0是一套多用途大綱編輯器, 可應用於協同 Markdown 文件編輯, 當結合  Pandoc  與  MikTeX , 可將 Markdown 資料轉換為 html 與 pdf 或 epub 格式. \n http://lab.kmol.info \xa0 目前使用可攜  miktex_portable_and_pandoc.7z , 使用者下載後與先前的 Python 可攜系統結合, 在原有的 start.bat 啟動批次檔案中的 path 設定, 加入: \n %Disk%:\\pandoc-2.4-windows-x86_64;%Disk%:\\miktex_portable\\texmfs\\install\\miktex\\bin; \n 重新啟動後, 即可利用 pandoc 指令與 xelatex 將 Markdown 資料轉為 pdf 文件. \n 此外, 若配合  https://github.com/mdecourse/kmolreport  倉儲, 用於建立課程專題報告、學位論文或期刊論文等, 則需要額外以下列指令: \n python -m pip install pandoc-fignos pandoc-tablenos pandoc-eqnos \n 安裝\xa0 pandoc-fignos ,  pandoc-tablenos  與  pandoc-eqnos  等模組. \n 過程中, 還必須透過 MikTeX Package Manager 安裝: \n tex\\latex\\catoptions\\catoptions.sty tex\\latex\\fancyhdr\\fancyhdr.sty tex\\latex\\xwatermark\\xwatermark.sty tex\\latex\\ltxkeys\\ltxkeys.sty tex\\latex\\ms\\everyshi.sty tikz.sty tex\\latex\\xcolor\\xcolor.sty \n 等 packages. \n LaTeX 電子書 \n LaTeX in 24 Hours:\xa0 https://link.springer.com/book/10.1007/978-3-319-47831-9 \xa0 \n Practical LaTeX:\xa0 https://link.springer.com/book/10.1007/978-3-319-06425-3 \xa0 \n LaTeX and Friends:\xa0 https://link.springer.com/book/10.1007/978-3-642-23816-1 \xa0 \n Math into LATEX:\xa0 https://link.springer.com/book/10.1007/978-1-4612-2134-0 \xa0 \n More Math Into LaTeX:\xa0 https://link.springer.com/book/10.1007/978-3-319-23796-1 \xa0 \n Digital Typography Using Latex:\xa0 https://link.springer.com/book/10.1007/b98959 \xa0 \n Latex for Linux:\xa0 https://link.springer.com/book/10.1007/978-1-4612-1462-5 \xa0 \n', 'tags': '', 'url': 'Leo-editor.html'}]};