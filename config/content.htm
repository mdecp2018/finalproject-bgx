<h1>簡介</h1>
<p>2018 Fall <a href="http://mde.tw/cp2018">計算機程式</a>與<a href="http://mde.tw/cadp2018">電腦輔助設計實習</a>課程期末分組示範網站</p>
<p>本倉儲位於: <a href="https://github.com/mdecp2018/finalproject-bgx">https://github.com/mdecp2018/finalproject-bgx</a>  </p>
<p><a href="https://github.com/">Github</a> 靜態網站:  <a href="https://mdecp2018.github.io/finalproject-bgx">https://mdecp2018.github.io/finalproject-bgx</a> </p>
<p>與 <a href="https://www.heroku.com/">Heroku</a> 上的 <a href="http://cp2018-bgx.herokuapp.com">http://cp2018-bgx.herokuapp.com</a> 動態網站保持同步</p>
<h4>電腦輔助設計室與協同設計室行事曆</h4>
<p><a href="https://calendar.google.com/calendar/embed?src=mde.nfu.edu.tw_3439313938333136353439%40resource.calendar.google.com&amp;ctz=Asia%2FTaipei&amp;mode=week&amp;src=mde.nfu.edu.tw_35303530373431313438%40resource.calendar.google.com&amp;ctz=Asia%2FTaipei">全頁檢視</a></p>
<p><iframe height="600" src="https://calendar.google.com/calendar/embed?src=mde.nfu.edu.tw_3439313938333136353439%40resource.calendar.google.com&amp;ctz=Asia%2FTaipei&amp;mode=week&amp;src=mde.nfu.edu.tw_35303530373431313438%40resource.calendar.google.com&amp;ctz=Asia%2FTaipei" width="800"></iframe></p><h2>可攜系統更新</h2>
<p><a href="https://drive.google.com/open?id=1qSnGb4NBmfGG0jGVNfQJX_9TNVweIdFW">p37-18.12.7z</a></p>
<p>升級為 Python 3.7.1 (<a href="https://docs.python.org/3/whatsnew/3.7.html">What's New in Python 3.7.1</a>)</p>
<p>內含 Heroku cli  版本 7.18.9 (啟動可攜系統後, 以 heroku --version 查詢版次, 以 heroku login 登入系統, 以 heroku logs 查詢啟動紀錄)</p>
<p>內含 Eric6 IDE 18.11</p>
<p>內含 V-rep 3.5.0 rev4</p>
<p>內含 Fossil SCM Verion 2.7</p>
<hr/>
<p>上述從 Python 3.7.0 更新到 Python 3.7.1 是將安裝在 c:\python37 目錄下的系統安裝檔案, 直接覆蓋 Python 3.7.0 可攜版本.</p>
<p>但因 Scripts/pip.exe 與 pip3.7.exe 與 pip3.exe 會將 c:\python37 直接寫入這三個 .exe 檔案, 導致直接執行 pip 時, 會因為找不到 c:\python37\python.exe 而無法執行, 必須使用 python -m pip 才能執行.</p>
<p>修改方式為使用 <a href="https://mh-nexus.de/en/hxd/">https://mh-nexus.de/en/hxd/</a> , 在二位元模式下編輯這三個 .exe 檔案, 將 c:\python37 換為 y:\p37 即可.</p>
<p>可攜 <a href="/downloads/HxD.7z">HxD.7z</a></p>
<h4>如何建立 Windows 64 位元可攜系統</h4>
<p>在 Windows 10 建立 Python 可攜系統的目的, 在於讓使用者可以自行攜帶與系統設定相關的檔案, 以及自行攜帶系統所安裝的 Python 特定模組, 讓使用者能將隨身系統放入隨身碟或隨身硬碟, 在任何 Windows 10 64 位元操作系統中使用.</p>
<p>建立可攜系統的步驟如下:</p>
<ol>
<li>下載 64 位元 Windows 的 Python 安裝版本</li>
<li>在 Windows 10 安裝 Python, 例如: 令其位於  C:\p37</li>
<li>將 C:\p37 複製到 C:\tmp\ p37\data 目錄後, 移除前述所安裝的 Python 版本</li>
<li>利用下列 C:\p37\start.bat 與 C:\p37\stop.bat 啟動與關閉可攜 Python 系統</li>
<li>配合 SciTE 作為可攜 Python 系統的程式編輯器</li>
<li>由於前述安裝的 Python 版本, 會將系統目錄寫入 Scripts\pip.exe 等三個檔案中, 可以使用  <a href="https://mh-nexus.de/en/hxd/">https://mh-nexus.de/en/hxd/</a> 改為可攜系統對應目錄.</li>
<li>其餘所需 Python 模組, 直接由可攜系統啟動後, 以 pip install 安裝</li>
</ol>
<h4>start.bat</h4>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">@echo off
REM 設定 y 硬碟代號與 data 目錄對應
set Disk=y
subst %Disk%: "data"
REM 設定 leo 相關對應 Home 位置
set HomePath=%Disk%:\home
set HomeDrive=%Disk%:\home
set Home=%Disk%:\home
REM 將系統 Python 程式的 io 設為 utf-8
set PYTHONIOENCODING="utf-8"
REM 將後續的指令執行, 以 %Disk% 為主
%Disk%:
REM 設定 PYTHONPATH
set PYTHONPATH=%Disk%:\p37\DLLs;%Disk%:\p37\Lib;%Disk%:\p37\Lib\site-packages;
set PYTHONHOME=%Disk%:\p37
REM for Qt and Qt Creator
set LLVM_INSTALL_DIR=%Disk%:\LLVM;
set QBS_INSTALL_DIR=%Disk%:\qbs-windows-x86_64-1.10.0;
REM for TCL
set TCL_LIBRARY=%Disk%:\p37\tcl\tcl8.6
set TK_LIBRARY=%Disk%:\p37\tcl\tcl8.6
REM 設定 Leo 所用的編輯器
set LEO_EDITOR=%Disk%:\scite\bin\Sc1.exe;
set BOOST_ROOT=%Disk%:\boost_1_66_0\;
REM set CMAKE_PREFIX_PATH=%Disk%:\msys64\mingw64\
REM for fossil https 連線設定
REM 若在近端使用 fossil ui 則要蓋掉
REM set HTTPS=on
REM 指令搜尋路徑設定
REM set path1=%PATH%;%Disk%:;%Disk%:\p37;%Disk%:\git\bin;%Disk%:\stunnel\bin;%Disk%:\sqlite-tools;%Disk%:\p37\Scripts;%Disk%:\Git\bin;%Disk%:\vrep331;
REM path1 is base of this portable Python3.6 system
set path1=%Disk%:;%Disk%:\p37;%Disk%:\git\bin;%Disk%:\stunnel\bin;%Disk%:\sqlite-tools;%Disk%:\p37\Scripts;%Disk%:\Git\bin;%Disk%:\vrep331;%Disk%:\p37\Lib\site-packages\PyQt5\Qt\bin;
REM path2 is for pandoc and miktex
set path2=%Disk%:\pandoc-2.0.2;%Disk%:\miktex_portable\texmfs\install\miktex\bin;%Disk%:\lua-5.3.4\bin;%Disk%:\coreutils-5.3.0\bin;%Disk%:\qtcreator-4.7.0-rc1\bin;%Disk%:\patch-2.5.9-7-bin\bin;
REM path3 is for gcc development 
set path3=%Disk%:\msys64\mingw64\bin;%Disk%:\swigwin-3.0.12;%Disk%:\cmake-3.10.1-win64-x64\bin;%Disk%:\diffutils-2.8.7-1\bin;%Disk%:\patch-2.5.9-7\bin;%Disk%:\graphviz-2.38\bin;
set path4=%Disk%:\boost_1_66_0\;%Disk%:\Strawberry\perl\bin;%D%:\jom_1_1_2;%Disk%:\LLVM\bin;%Disk%:\QtCreator\bin;%Disk%:\vrep340_rev1;%Disk%:\p37\tcl\tcl8.6;%Disk%:\xsltproc;
set path5=%Disk%:\ffmpeg-20180504-dc7a8f7-win64-static\bin;%Disk%:\oce-0.18.1\bin\;%Disk%:\oce-0.18.1\lib\;%Disk%:\gnuplot\bin;
set JAVA_HOME=%Disk%:\Java\jdk1.8.0_172;
set ANDROID_HOME=%Disk%:\Android\sdk;
set path6=%Disk%:\Java\jdk1.8.0_172\bin;%Disk%:\Java\jre1.8.0_172\bin;%Disk%:\Android\AndroidStudio\bin;%Disk%:\Android\sdk\tools;%Disk%:\Android\sdk\platform-tools;%Disk%:\BIND9.12.2-P2.x64;
REM for Pythonocc under MSYS2 according to https://groups.google.com/forum/?utm_medium=email&amp;utm_source=footer#!msg/pythonocc/z-NI9A-Vyic/8QjD81q-AwAJ
set CSF_GraphicShr=%Disk%:\oce-0.18.1\bin\TKOpenGl.dll
path=%path%;%path1%;%path2%;%path3%;%path4%;%path5%;%path6%;
start /MIN %Disk%:\scite\bin\Sc1.exe
start /MIN %Disk%:\scite\bin\Sc1.exe
start /MIN cmd.exe
start /MIN cmd.exe
REM start /MIN cmd.exe /k "y:\cp2018.bat"
REM start /MIN cmd.exe /k "y:\cp2018_http_server.bat
REM start /MIN cmd.exe /k "y:\cadp2018.bat"
REM 啟動 Leo 編輯器
%Disk%:\p37\python.exe %Disk%:\launchLeo.py
REM 啟動 stunnel
REM start /MIN fossil.exe server -P 127.0.0.1:8080 %Disk%:\tmp\fossil_repo
REM start /MIN stunnel.exe
REM start qtcreator
Exit</pre>
<h4>stop.bat</h4>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">@echo off
set Disk=y
REM 關閉 SciTE
taskkill /IM Sc1.exe /F
REM 關閉 python
taskkill /IM python.exe /F
taskkill /IM pythonw.exe /F
REM 關閉 stunnel
taskkill /IM stunnel.exe /F
REM 關閉 fossil
taskkill /IM fossil.exe /F
rem taskkill /IM sharex.exe /F
REM 清除 log 資料
path=%PATH%;
REM del /Q /F  V:\tmp\*.*
REM 終止虛擬硬碟與目錄的對應
subst %Disk%: /D
REM 關閉 cmd 指令視窗
taskkill /IM cmd.exe /F
REM taskkill /IM mingw32 /F
EXIT</pre>
<p></p>
<p></p>
<p></p><h2>靜態與動態網站</h2>
<h4>網站類型</h4>
<p>使用者在建構網站時, 可以選擇採用靜態或動態網站類型, 靜態網站主要伺服 <a href="https://en.wikipedia.org/wiki/HTML">html</a> 檔案, 其中可能內含能在客戶端瀏覽器中執行的 <a href="https://en.wikipedia.org/wiki/JavaScript">JavaScript</a> 程式.</p>
<p>而動態網站則將網際程式儲存在伺服器端, 透過解譯器與瀏覽器端的使用者互動後, 將 <a href="https://en.wikipedia.org/wiki/HTML">html</a> 檔案 (也可能內含能在客戶端瀏覽器中執行的 <a href="https://en.wikipedia.org/wiki/JavaScript">JavaScript</a> 程式) 送回瀏覽器端執行.</p>
<p>本課程的靜態網站利用 <a href="https://pages.github.com/">Github Pages</a> 建構, 而動態網站則採用 <a href="https://www.heroku.com/">Heroku</a> 建構.</p>
<h4>靜態網站優點</h4>
<p>相對於動態網站, 靜態網站架構單純, 且直接送回使用者要求的 <a href="https://en.wikipedia.org/wiki/HTML">html</a> 檔案, 反應速度快, 伺服器端通常只需 <a href="https://en.wikipedia.org/wiki/World_Wide_Web">WWW</a>  伺服器, 因此維護成本較低.</p>
<ol>
<li>架構單純</li>
<li>反應速度快</li>
<li>維護成本較低</li>
<li>較無受駭危機</li>
</ol>
<h4>靜態網站缺點</h4>
<ol>
<li>通常無法直接在網站中修改內容</li>
<li>較無法與使用者進行互動</li>
</ol>
<h4>動態網站優點</h4>
<ol>
<li>規劃彈性高</li>
<li>能與使用者直接進行互動</li>
</ol>
<h4>動態網站缺點</h4>
<ol>
<li>反應速度較慢</li>
<li>維護成本較高</li>
</ol>
<p><iframe allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/_wFJj94kSTU" width="560"></iframe></p><h1>分組網站</h1>
<p></p>
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/']});
}
</script>
</p>
<p id="zone"></p>
<p>
<script type="text/python3">
from browser import document,html

cda = 9
cdb = 9
cadpa = 10
cadpb = 8
vecp = 11

# 計算機程式

alink = "https://mdecp2018.github.io/finalproject-ag"
blink = "https://mdecp2018.github.io/finalproject-bg"

document['zone'] <= html.H4("CDA:")
for i in range(1, cda+1):
    site = alink + str(i)
    document['zone'] <= html.A(site, href=site) + html.BR()

document['zone'] <= html.H4("CDB:")
for i in range(1, cdb+1):
    if i is not 2 and i is not 6:
        site = blink + str(i)
    else:
        site = blink + str(i) + "-1"
    document['zone'] <= html.A(site, href=site) + html.BR()

# 電腦輔助設計

alink = "https://mdecadp2018.github.io/finalproject-ag"
blink = "https://mdecadp2018.github.io/finalproject-bg"

document['zone'] <= html.H4("CADPA:")
for i in range(1, cadpa+1):
    site = alink + str(i)
    document['zone'] <= html.A(site, href=site) + html.BR()

document['zone'] <= html.H4("CADPB:")
for i in range(1, cadpb+1):
    site = blink + str(i)
    document['zone'] <= html.A(site, href=site) + html.BR()

# 車輛計算機程式

vecplink = "https://vecp2018.github.io/finalproject-ag"

document['zone'] <= html.H4("VECP:")
for i in range(1, vecp+1):
    site = vecplink + str(i)
    document['zone'] <= html.A(site, href=site) + html.BR()
</script>
</p><h1>課程專題</h1>
<p>計算機程式、網際內容管理、電腦輔助設計實習與協同產品設計實習等系列課程的目的, 在培育<span class="js-issue-title">具利用網際運算執行全球協同創新產品設計能力的機械設計工程師.</span></p>
<p><span class="js-issue-title"><span>在培養下一代具利用網際運算執行全球協同創新產品設計能力的機械設計工程師, 需要在每一門課程注入四種溝通用的語言 (languages): 英文, 網路, 電腦程式與數學.</span></span></p>
<h4><span class="js-issue-title">網際運算</span></h4>
<p>先從認識周遭網路軟硬體使用的基本架構作為起點, 了解上課電腦網路的設定與區網與廣域網路的配置, 自行動手進行各種組態的測試與驗證, 針對有線與無線網路的規格差異進行比較, 從中找出執行特定專案的最適網路配置.</p>
<p>除了徹底了解 Windows 10 外, 針對周遭的各種 Windows Servers 與功能進行初步了解, 自行安裝 Ubuntu Server 與 Desktop, 從基本的網路配置到基本的 Linux 指令, 了解如何在網路節點配置可供設計運算的資源.</p>
<p>在 Ubuntu 伺服器中安裝 Nginx, 再設法安裝 Fossil SCM 與 Stunnel, 了解如何在 https Fossil SCM 環境中, 利用 Python 程式建立使用者帳號, 並利用網路郵件通知用戶帳號與密碼.</p>
<p>在 Ubuntu 伺服器中配置 IPv4 與 IPv6 網路設定, 了解如何安裝 Squid Proxy 伺服器, 讓純 IPv6 設定電腦可以透過代理主機連到只支援 IPv4 協定的 WWW 伺服器.</p>
<p>在 Ubuntu 伺服器中配置 BIND 伺服器, 了解各網際主機 IP 位址與符號名稱轉換的機制.</p>
<p>在 Ubuntu 伺服器中配置完整的 GCC 與 Python 、 Javascript 及 Lua 程式開發環境, 並著手編寫網際程式, 設法利用分散式與負載平衡方式安排網際伺服器叢集.</p>
<p>在 Windows 10 或 Ubuntu 配置 PyQt5 視窗程式, 設法與上述網際配置的伺服器叢集電腦進行互動.</p>
<p>Mathematics of design: <a href="https://inkbotdesign.com/the-mathematics-of-design/">https://inkbotdesign.com/the-mathematics-of-design/</a> </p>
<h4><span class="js-issue-title">全球協同</span></h4>
<p>養成閱讀英文資料的習慣, 操作軟體時使用英文介面, 每天背誦一小段<a href="https://www.taiwannews.com.tw/en/cate/6">英文小品</a>, 勤查<a href="https://www.merriam-webster.com/">單字</a>, 定期取得英文能力認證.</p>
<p>用心經營自己的 <a href="https://github.com/">Github</a>、<a href="https://about.gitlab.com/">Gitlab</a>、<a href="https://bitbucket.org">Bitbucket</a>  倉儲與 <a href="https://www.linkedin.com/">Linkedin</a> 帳號.</p>
<h4><span class="js-issue-title">創新產品設計</span></h4>
<p><a href="/downloads/C-K%20theory_ modelling creative thinking and its impact on research.pdf"><span class="js-issue-title">C-K theory: modelling creative thinking and its impact on research.pdf</span></a></p>
<p><a href="/downloads/extending_the_c-k_design_theory_with_an_environment_space_E.pdf"><span class="js-issue-title">Extending the C–K design theory: A theoretical background for personal design assistants.pdf</span></a></p>
<p><a href="/downloads/10%20Years of C-K Theory_ A Survey on the Academic and Industrial Impacts of a Design Theory_.pdf"><span class="js-issue-title">10 years of C-K theory: a survey on the academic and industrial impacts of a design theory.pdf</span></a></p>
<p><a href="/downloads/Imagining%20Knowledge, a Formal Account of Design.pdf"><span class="js-issue-title">Imagining Knowledge, a Formal Account of Design.pdf</span></a></p><h2>計算機程式</h2>
<h4>Brython</h4>
<p><a href="https://github.com/mdecourse/webgame">https://github.com/mdecourse/webgame</a> </p>
<h4>網際 Flask</h4>
<p><a href="https://github.com/mdecourse/wcms-scrum1">https://github.com/mdecourse/wcms-scrum1</a> </p>
<p>CMSimfly 系統研究</p>
<p><a href="https://github.com/chiamingyen/cmsimfly">https://github.com/chiamingyen/cmsimfly</a> </p>
<p>Pygrouf 系統研究</p>
<p><a href="https://github.com/chiamingyen/pygrouf">https://github.com/chiamingyen/pygrouf</a> </p>
<h4>網際機構模擬系統</h4>
<p>承接 <a href="https://github.com/KmolYuan/Pyslvs-PyQt5">https://github.com/KmolYuan/Pyslvs-PyQt5</a> 系統中的 YAML 檔案格式, 讓使用者在網際環境中進行平面機構模擬, 並將各機構合成或模擬後所得到的網際 URL 存入資料庫.</p>
<h4>單機 GUI 程式</h4>
<p>從簡單計算機到工程用計算機</p>
<p><a href="https://github.com/scrum-1/scrum_pyqt5_calculator">https://github.com/scrum-1/scrum_pyqt5_calculator</a> </p>
<p>或者利用 <a href="http://flask.pocoo.org/">Flask</a>、<a href="https://github.com/jonathan-kosgei/pybean">Pybean</a> 與 <a href="https://brython.info/">Brython</a> (or <a href="https://github.com/fengari-lua/fengari-web">Fegari-Web</a>) 開發網際運算器, 能將使用者在線上運算的內容存入資料庫, 或建立一個簡單的網際運算環境, 讓使用者輸入 <a href="https://brython.info/">Brython</a> 或 <a href="https://www.lua.org/">Lua</a> 程式進行設計運算. 例如:  <a href="http://mde.tw/vecp2018/lua/SchoolProject/">http://mde.tw/vecp2018/lua/SchoolProject/</a> 導入資料庫系統, 讓使用者可以將運算程式存入資料庫, 或導入後編輯再運算利用.</p>
<p>多功能編輯器</p>
<p><a href="https://github.com/KmolYuan/kmol-editor">https://github.com/KmolYuan/kmol-editor</a> </p>
<p>平面凸輪輔助設計系統</p>
<p><a href="https://github.com/KmolYuan/cam-profile">https://github.com/KmolYuan/cam-profile</a> </p>
<p><a href="http://mde.tw/cp2018/content/%E8%AE%80%E5%AF%AB%E7%B6%B2%E9%A0%81%E5%85%A7%E5%AE%B9.html">Beautifulsoup4 應用研究</a></p>
<p><a href="https://github.com/MechanicalSoup/MechanicalSoup">Mechanicalsoup 應用研究</a></p>
<p><a href="https://graph-tool.skewed.de/">Graph Tool 應用研究</a></p>
<h3>網際模擬程式</h3>
<p><a href="https://github.com/mdecourse/webgame">https://github.com/mdecourse/webgame</a> 是一套源自<a href="https://github.com/tiggerntatie/brython-server"> https://github.com/tiggerntatie/brython-server</a> 的網際模擬程式庫, 適合用來開發線上遊戲或與工程設計相關的網際程式.</p>
<p>之前的 js 程式庫都採用遠端資料, 目前將各程式庫升級為最新版本, 且改為自帶程式庫.</p>
<p>參考的網際程式庫: <a href="https://github.com/tiggerntatie/ggame">https://github.com/tiggerntatie/ggame</a> </p>
<p>由於此 ggame 程式庫使用</p>
<p>jquery-3.3.1.min.js - <a href="https://jquery.com/">https://jquery.com/</a> <br/>jquery-ui.1.12.1.min.js - <a href="https://jqueryui.com/">https://jqueryui.com/</a> <br/>pixi-4.8.2.min.js - <a href="http://www.pixijs.com/">http://www.pixijs.com/</a> <br/>buzz-1.2.1.js - <a href="http://buzz.jaysalvat.com/">http://buzz.jaysalvat.com/</a> <br/>brython-3.7.0.js - <a href="https://brython.info/">https://brython.info/</a> <br/>brython_stdlib-3.7.0.js</p>
<p>因此使用者必須對上述程式庫有些了解後, 再深入研究如何使用  ggame 程式庫開發專案套件.</p>
<p>目前的 spacewar: <a href="http://mde.tw/webgame/spacewar.html">http://mde.tw/webgame/spacewar.html</a></p>
<hr/>
<h4>Ggame Documentation</h4>
<p><a href="https://ggame.readthedocs.io/en/latest/introduction.html">https://ggame.readthedocs.io/en/latest/introduction.html</a> </p>
<p><a href="https://github.com/HHS-IntroProgramming/Standards-and-Syllabus/wiki/More-Graphics:-Assets-and-Looping">https://github.com/HHS-IntroProgramming/Standards-and-Syllabus/wiki/More-Graphics:-Assets-and-Looping</a> </p>
<p><span>Ggame is </span><strong>not</strong><span> intended to be a full-featured gaming API, with every bell and whistle. It is designed primarily as a tool for teaching computer programming, recognizing that the ability to create engaging and interactive games is a powerful motivator for many progamming students. Accordingly, any functional or performance enhancements that </span><em>can</em><span> be reasonably implemented by the user are left as an exercise.</span></p>
<h4>Functionality Goals</h4>
<p><span>The ggame library is intended to be trivially easy to use. For example:</span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from ggame import App, ImageAsset, Sprite
# Create a displayed object at 100,100 using an image asset
Sprite(ImageAsset("bunny.png"), (100,100))
# Create the app, with a default stage
app = App()  
# Run the app
app.run()</pre>
<div class="section" id="extensions">
<h4>Extensions<a class="headerlink" href="https://ggame.readthedocs.io/en/latest/introduction.html#extensions" title="Permalink to this headline"></a></h4>
<p>Ggame is being extended for geometry exploration in a manner reminiscent of Geogebra, digital logic simulation, and with tools and classes to use with rocket and orbital simulations.</p>
</div>
<div class="section" id="overview">
<h4>Overview<a class="headerlink" href="https://ggame.readthedocs.io/en/latest/introduction.html#overview" title="Permalink to this headline"></a></h4>
<p>There are three major pieces in a ggame app: assets, sprites and the app itself.</p>
<div class="section" id="assets">
<h4>Assets<a class="headerlink" href="https://ggame.readthedocs.io/en/latest/introduction.html#assets" title="Permalink to this headline"></a></h4>
<p>Asset objects (i.e.<span> </span><code class="docutils literal notranslate"><span class="pre">ImageAsset</span></code>, etc.) typically represent separate files that are provided by the “art department”. These might be background images, user interface images, or images that represent objects in the game. In addition,<span> </span><code class="docutils literal notranslate"><span class="pre">SoundAsset</span></code><span> </span>are used to represent sound files (.wav or .mp3 format) that can be played in the game.</p>
<p>Ggame also extends the asset concept to include graphics that are generated dynamically at run-time, such as geometrical objects, e.g. rectangles, lines, etc.</p>
</div>
<div class="section" id="sprites">
<h4>Sprites<a class="headerlink" href="https://ggame.readthedocs.io/en/latest/introduction.html#sprites" title="Permalink to this headline"></a></h4>
<p>All of the visual aspects of the game are represented by instances of<span> </span><code class="docutils literal notranslate"><span class="pre">Sprite</span></code><span> </span>or subclasses of it.</p>
</div>
<div class="section" id="app">
<h4>App<a class="headerlink" href="https://ggame.readthedocs.io/en/latest/introduction.html#app" title="Permalink to this headline"></a></h4>
<p>Every ggame application must create a single instance of the<span> </span><code class="xref py py-class docutils literal notranslate"><span class="pre">App</span></code><span> </span>class (or a sub-class of it). Create an instance of the<span> </span><code class="xref py py-class docutils literal notranslate"><span class="pre">App</span></code><span> </span>class to draw a graphics canvas in your browser window. Execute the app’s<span> </span><code class="xref py py-meth docutils literal notranslate"><span class="pre">run()</span></code><span> </span>method to start refreshing and redrawing the visual assets on the screen.</p>
</div>
<div class="section" id="events">
<h4>Events<a class="headerlink" href="https://ggame.readthedocs.io/en/latest/introduction.html#events" title="Permalink to this headline"></a></h4>
<p>No game is complete without a player and players make events. Your code handles user input by registering to receive keyboard and mouse events using<span> </span><code class="xref py py-meth docutils literal notranslate"><span class="pre">listenKeyEvent()</span></code><span> </span>and<span> </span><code class="xref py py-meth docutils literal notranslate"><span class="pre">listenMouseEvent()</span></code><span> </span>methods of the<span> </span><code class="xref py py-class docutils literal notranslate"><span class="pre">App</span></code><span> </span>class.</p>
</div>
</div>
<div class="section" id="execution-environment">
<h4>Execution Environment<a class="headerlink" href="https://ggame.readthedocs.io/en/latest/introduction.html#execution-environment" title="Permalink to this headline"></a></h4>
<p>Ggame is designed to execute in a web browser using<span> </span><a class="reference external" href="http://brython.info/">Brython</a>,<span> </span><a class="reference external" href="http://www.pixijs.com/">Pixi.js</a><span> </span>and<span> </span><a class="reference external" href="http://buzz.jaysalvat.com/">Buzz</a>. The easiest way to do this is by executing from<span> </span><a class="reference external" href="https://runpython.org/">runpython</a>, with your source code stored at<a class="reference external" href="http://github.com/">github</a>. When you use ggame from within<span> </span><a class="reference external" href="https://runpython.org/">runpython</a>, the Github ggame repository is automatically placed on the import search path.</p>
</div>
<div class="section" id="geometry">
<h4>Geometry<a class="headerlink" href="https://ggame.readthedocs.io/en/latest/introduction.html#geometry" title="Permalink to this headline"></a></h4>
<p>When referring to screen coordinates, note that the x-axis of the computer screen is<span> </span><em>horizontal</em><span> </span>with the zero position on the left hand side of the screen. The y-axis is<span> </span><em>vertical</em><span> </span>with the zero position at the<span> </span><strong>top</strong><span> </span>of the screen.</p>
<p>Increasing positive y-coordinates correspond to the downward direction on the computer screen. Note that this is<span> </span><strong>different</strong><span> </span>from the way you may have learned about x and y coordinates in math class!</p>
</div>
<p>Another example:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from ggame import App, ImageAsset, Sprite, MouseEvent
from random import random, randint

class Bunny(Sprite):
    
    asset = ImageAsset("bunny.png")
    
    def __init__(self, position):
        super().__init__(Bunny.asset, position)
        # register mouse events
        App.listenMouseEvent(MouseEvent.mousedown, self.mousedown)
        App.listenMouseEvent(MouseEvent.mouseup, self.mouseup)
        App.listenMouseEvent(MouseEvent.mousemove, self.mousemove)
        self.dragging = False

    
    def step(self):
        """
        Every now and then a bunny hops...
        """
        if random() &lt; 0.01:
            self.x += randint(-20,20)
            self.y += randint(-20,20)
        
        
    def mousedown(self, event):
        # capture any mouse down within 50 pixels
        self.deltax = event.x - (self.x + self.width//2) 
        self.deltay = event.y - (self.y + self.height//2)
        if abs(self.deltax) &lt; 50 and abs(self.deltay) &lt; 50:
            self.dragging = True
            # only drag one bunny at a time - consume the event
            event.consumed = True
            
    def mousemove(self, event):
        if self.dragging:
            self.x = event.x - self.deltax - self.width//2
            self.y = event.y - self.deltay - self.height//2
            event.consumed = True
            
    def mouseup(self, event):
        if self.dragging:
            self.dragging = False
            event.consumed = True
            
        
class DemoApp(App):
    
    def __init__(self):
        super().__init__()
        for i in range(10):
            Bunny((randint(50,self.width),randint(50,self.height)))
        
    def step(self):
        """
        Override step to perform action on each frame update
        """
        for bunny in self.spritelist:
            bunny.step()


# Create the app
app = DemoApp()  
# Run the app
app.run()</pre>
<h4>特別注意</h4>
<p><a href="https://help.github.com/articles/files-that-start-with-an-underscore-are-missing/">https://help.github.com/articles/files-that-start-with-an-underscore-are-missing/</a> </p>
<p>因為 Github Pages 內建無視以 _ 開頭的檔案, 而 Brython 在導入模組時, 必須能夠擷取模組目錄下的 __init__.py, 因此必須設定 _config.yml 檔案, 指定 Github Pages 建立頁面時, 必須包含 static/ggame 目錄下的 __init__.py 檔案.</p>
<p>_config.yml 設定檔案內容為:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">include: [static/ggame, __init__.py]</pre>
<p>根據以上資訊所建立的網際互動程式範例倉儲:</p>
<p><a href="https://github.com/mdecourse/kmolgame">https://github.com/mdecourse/kmolgame</a> </p>
<p>程式網頁:</p>
<p><a href="http://mde.tw/kmolgame/">http://mde.tw/kmolgame/</a></p>
<p><a href="http://mde.tw/kmolgame/bunny.html">http://mde.tw/kmolgame/bunny.html</a> </p>
<h3>Spacegame</h3>
<h4>來源:</h4>
<p><a href="https://github.com/HHS-IntroProgramming/Standards-and-Syllabus/wiki/Advanced-Graphics-with-Classes">https://github.com/HHS-IntroProgramming/Standards-and-Syllabus/wiki/Advanced-Graphics-with-Classes</a> </p>
<h4>參考:</h4>
<p><a href="https://github.com/tiggerntatie/brython-server">https://github.com/tiggerntatie/brython-server</a> </p>
<p><iframe allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/mwlNP2-Y3GI" width="560"></iframe></p>
<p>For this tutorial, return to your ggame-tutorials repository that you forked earlier. Create a new file called tutorial4.py and paste the following code into it to get started:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from ggame import App, RectangleAsset, ImageAsset, Sprite, LineStyle, Color, Frame

myapp = App()

# Background
black = Color(0, 1)
noline = LineStyle(0, black)
bg_asset = RectangleAsset(myapp.width, myapp.height, noline, black)
bg = Sprite(bg_asset, (0,0))

myapp.run()</pre>
<p>This snippet should look familiar, as it is a "cut down" version of the last tutorial that you worked on (tutorial3.py). Notice that we have removed the step function entirely. In this tutorial, we will add the step function back, but in an entirely different way!</p>
<h4>Create a New App Class</h4>
<p>For the first part of this tutorial, we would like to customize the behavior of the standard App class by creating an entirely new application class called MyApp that inherits its basic behavior from the standard App class.</p>
<p>Paste the following snippet in just before the myapp = ... line:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">class SpaceGame(App):
    """
    Tutorial4 space game example.
    """
    def __init__(self):
        super().__init__()</pre>
<p>Then cut the four lines that create the background and paste them in below the super()... line and indent them to match. Finally, change the parts that say myapp.width and myapp.height to be self.width and self.height, respectively. Now your new piece of code should look like this:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">class SpaceGame(App):
    """
    Tutorial4 space game example.
    """
    def __init__(self):
        super().__init__()
        # Background
        black = Color(0, 1)
        noline = LineStyle(0, black)
        bg_asset = RectangleAsset(self.width, self.height, noline, black)
        bg = Sprite(bg_asset, (0,0))</pre>
<p>Yes, you could have pasted this in from the get-go, but I want you to be very clear about where this code is coming from.</p>
<p>Things to notice about the change:</p>
<ul>
<li><code>class SpaceGame(App):</code><span> </span>defines a new<span> </span><em>class</em>, called<span> </span><code>SpaceGame</code>, that<span> </span><em>inherits</em><span> </span>all of the functionality of the standard<span> </span><code>App</code><span> </span>class.</li>
<li>The next line defines the<span> </span><code>__init__</code><span> </span>method for the class. In this case it expects no arguments.</li>
<li>The<span> </span><code>super().__init__(...</code><span> </span>line forces the new SpaceGame class to call the standard App class'<span> </span><code>__init__</code><span> </span>function before beginning its own initialization. Always do this if you want your new class to fully inherit the behavior of the parent class.</li>
<li>Finally, since this code<span> </span><em>initializes</em><span> </span>the game, it makes sense to place the code for creating a black background in the<span> </span><code>__init__</code><span> </span>method of the game class.</li>
</ul>
<p>As it stands, your program is broken. To make the new SpaceGame class take effect, we have to<span> </span><em>instantiate</em><span> </span>it instead of instantiating the App class. Change the next to last line of the program from<span> </span></p>
<p><code>myapp = App()</code><span> </span>to<span> </span><code>myapp = SpaceGame()</code>.</p>
<p>Try running the program. You should see a black background.</p>
<h4>Create a New Sprite Class</h4>
<p>Just above your SpaceGame class definition, paste this new code:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">class SpaceShip(Sprite):
    """
    Animated space ship
    """
    asset = ImageAsset("images/four_spaceship_by_albertov_with_thrust.png", 
        Frame(227,0,65,125), 4, 'vertical')

    def __init__(self, position):
        super().__init__(SpaceShip.asset, position)</pre>
<p>Run your program. It should not do anything different from before. Creating a new Sprite<span> </span><em>class</em><span> </span>does not actually create any sprites. All it does is create a<span> </span><em>blueprint</em><span> </span>for making sprites.</p>
<p>Add a single SpaceShip sprite by adding the following line to the end of the SpaceGame<span> </span><code>__init__</code>method (properly indented, of course):</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">SpaceShip((100,100))</pre>
<p><span>Now run your code. Cool. Try adding a few more SpaceShip instances at the end of your SpaceGame </span><code>__init__</code><span> method:</span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">        SpaceShip((150,150))
        SpaceShip((200,50))</pre>
<p>It looks like you are building a fleet!</p>
<p>The code we added is very simple, but there is one line that needs some explanation:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">    asset = ImageAsset("images/four_spaceship_by_albertov_with_thrust.png", 
        Frame(227,0,65,125), 4, 'vertical')</pre>
<p>The<span> </span><code>asset</code><span> </span>variable is created<span> </span><em>within the class</em>, but outside of any methods. This makes it a<span> </span><em>class</em>attribute that will be available to all<span> </span><em>instances</em><span> </span>of the class. We used this to call the parent Sprite class<span> </span><code>__init__</code><span> </span>method using the syntax:<span> </span><code>SpaceShip.asset</code>. This approach allows us to create as many instances of the SpaceShip as we want, but without creating multiple assets. There is<span> </span><strong>one</strong><span> </span>object representing the spaceship image, but<span> </span><strong>multiple</strong><span> </span>objects representing the sprites.</p>
<p>This call to create an<span> </span><code>ImageAsset</code><span> </span>has more arguments than we used in the previous tutorial. Here's what they are about:</p>
<ul>
<li>The<span> </span><code>Frame(227,0,65,125)</code><span> </span>argument specifies a rectangular section<span> </span><em>within</em><span> </span>the image file. If you look at the image file in Github you will notice that it actually consists of<span> </span><em>sixteen</em><span> </span>different spacecraft images, some with rocket thrust and some without. The frame arguments refer to the horizontal and vertical location of the upper left hand corner of the sub-image we want (227 and 0 pixels), followed by the width and height of it (65 and 125 pixels).</li>
<li>The<span> </span><code>4</code><span> </span>argument means that the asset will actually include<span> </span><strong>four</strong><span> </span>sub-images of the same size as the first, and...</li>
<li>The<span> </span><code>'vertical'</code><span> </span>argument means that those four images are arranged vertically in the image file. Go back to the github repository and<span> </span><em>look</em><span> </span>at this image file to see what I mean by "four images ... arranged vertically."</li>
</ul>
<p><span>All of this additional information means that this asset is ready to </span><strong>animate</strong><span>! It consists of a single spaceship without thrust, and three spaceship images that include a blast of thrust. By selecting which of these </span><em>frames</em><span> we want to show at any given time, we can give the appearance of motion within the sprite itself.</span></p>
<h4><span>Animate with Step!</span></h4>
<p><span>First, let's add some attributes to the SpaceShip class. Add the following lines at the end of the SpaceShip class <code>__init__</code> method:</span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">        self.vx = 1
        self.vy = 1
        self.vr = 0.01</pre>
<p>These will set an initial horizontal, vertical and rotational velocity.</p>
<p>Then, add a<span> </span><code>step</code><span> </span>method to the SpaceShip class. This should appear after the SpaceShip class<span> </span><code>__init__</code><span> </span>method (but leave a space between them):</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">    def step(self):
        self.x += self.vx
        self.y += self.vy
        self.rotation += self.vr</pre>
<p>This will just add the velocities to the sprite's position attributes,<span> </span><code>x</code>,<span> </span><code>y</code>, and<span> </span><code>rotation</code>, which are built-in attributes of the Sprite class that were automatically<span> </span><em>inherited</em><span> </span>by the SpaceShip class.</p>
<p>If you are unsure about where to paste these code snippets, check the full listing at the end of this page.</p>
<p>Unfortunately, just adding a<span> </span><code>step</code><span> </span>method to a sprite class does not mean that it will be called. So we have to add a<span> </span><code>step</code><span> </span>method to the application itself. Add the following code below the<span> </span><code>__init__</code><span> </span>method of the SpaceGame class (but leave a space between them):</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">    def step(self):
        for ship in self.getSpritesbyClass(SpaceShip):
            ship.step()</pre>
<p>You are<span> </span><strong>expected</strong><span> </span>to add a<span> </span><code>step</code><span> </span>method to your own customizations of the standard App class. This<span> </span><code>step</code><span> </span>method<span> </span><strong>is</strong><span> </span>automatically called with every video frame update in the game.</p>
<p>This method body uses a<span> </span><code>for</code><span> </span>loop to access every<span> </span><em>instance</em><span> </span>of the SpaceShip class, then calls its<span> </span><code>step</code><span> </span>method (<code>ship.step()</code>). Since the SpaceGame<span> </span><code>step</code><span> </span>function is called with every video frame update, this means that every SpaceShip<span> </span><code>step</code><span> </span>function will also be called with every video frame update.</p>
<h4>Changing the Sprite Image</h4>
<p><span>Now to the animation details. We want the thrust images to animate when the user presses the space key. So here are the things we have to do:</span></p>
<ul>
<li>Listen for when the space button is pressed<span> </span><em>down</em>.</li>
<li>Listen for when the space button is<span> </span><em>released</em>.</li>
<li>Use the<span> </span><code>step</code><span> </span>method to change the sprite image, depending on whether the space is down or released.</li>
</ul>
<p><span>First, let's add code for managing the </span><em>state</em><span> of the thrusting, and listen for the appropriate keys. Add the following inside the end of the SpaceShip </span><code>__init__</code><span> method:</span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">        self.thrust = 0
        self.thrustframe = 1
        SpaceGame.listenKeyEvent("keydown", "space", self.thrustOn)
        SpaceGame.listenKeyEvent("keyup", "space", self.thrustOff)</pre>
<p><span>Then add the </span><code>thrustOn</code><span> and </span><code>thrustOff</code><span> methods to the SpaceShip class. Add the following immediately after the SpaceShip </span><code>step</code><span> method:</span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">    def thrustOn(self, event):
        self.thrust = 1
        
    def thrustOff(self, event):
        self.thrust = 0</pre>
<p>These simple functions will keep track of whether the space key is down (thrust is 1) or up (thrust is 0).</p>
<p>Finally, add the following inside the end of the SpaceShip<span> </span><code>step</code><span> </span>method:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">        # manage thrust animation
        if self.thrust == 1:
            self.setImage(self.thrustframe)
            self.thrustframe += 1
            if self.thrustframe == 4:
                self.thrustframe = 1
        else:
            self.setImage(0)</pre>
<p>If<span> </span><code>self.thrust</code><span> </span>is set to 1, it means the space button is depressed and the sprite image is set to whatever<span> </span><code>self.thrustframe</code><span> </span>is (remember we initialized it to 1 in the class<span> </span><code>__init__</code><span> </span>method). Image number 0 is the first image, 1 is the second, and so on. The next three lines<span> </span><em>increment</em><span> </span>the thrustframe attribute, checking to see if it has gone beyond the end of our list of images (there are only three of them) and setting it back to 1 if necessary.</p>
<p>Finally, if<span> </span><code>self.thrust</code><span> </span>is set to 0, it means the space button is released, and we should just display the thrustless spaceship image, which is done with<span> </span><code>self.setImage(0)</code>.</p>
<h4>Final Details</h4>
<p>There are many more improvements to make to our game, but these are left as exercises for the student!</p>
<p>You may have noticed that the spaceship sprites rotate in a very strange way. This is because the default "center" of a sprite is actually its upper left corner. You can change the center by setting the<span> </span><code>fxcenter</code><span> </span>and<span> </span><code>fycenter</code><span> </span>attributes of the Sprite (or in our case the SpaceShip) class. Do this by adding this final line to the SpaceShip<span> </span><code>__init__</code><span> </span>method:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">        self.fxcenter = self.fycenter = 0.5</pre>
<p>Run your program again and revel in its awesomeness!</p>
<p>Find more information about the Sprite and App classes by examining the detailed<span> </span><a href="http://brythonserver.github.io/ggame/" rel="nofollow">ggame documentation</a>.</p>
<h4>Questions</h4>
<ol>
<li>Extend the tutorial to use the<span> </span><code>'left arrow'</code><span> </span>and<span> </span><code>'right arrow'</code><span> </span>keys to rotate the ships left and right.</li>
<li>Extend the tutorial to use the AWSD keys to control the ship motion.</li>
<li>ADVANCED: Extend the tutorial to create a<span> </span><code>Blast</code><span> </span>sprite that uses the<span> </span><code>blast.png</code><span> </span>image included in the<span> </span><code>/images</code><span> </span>folder. Use the<span> </span><code>'enter'</code><span> </span>key to create Blast sprites on the screen at random locations (or "fire" them from the spaceship sprites).</li>
<li>ADVANCED: Extend the tutorial to animate the<span> </span><code>Blast</code><span> </span>sprite.</li>
</ol>
<h4>Complete Source for the Tutorial</h4>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">"""
tutorial4.py
by E. Dennison
"""
from ggame import App, RectangleAsset, ImageAsset, Sprite, LineStyle, Color, Frame

class SpaceShip(Sprite):
    """
    Animated space ship
    """
    asset = ImageAsset("images/four_spaceship_by_albertov_with_thrust.png", 
        Frame(227,0,65,125), 4, 'vertical')

    def __init__(self, position):
        super().__init__(SpaceShip.asset, position)
        self.vx = 1
        self.vy = 1
        self.vr = 0.01
        self.thrust = 0
        self.thrustframe = 1
        SpaceGame.listenKeyEvent("keydown", "space", self.thrustOn)
        SpaceGame.listenKeyEvent("keyup", "space", self.thrustOff)
        self.fxcenter = self.fycenter = 0.5

    def step(self):
        self.x += self.vx
        self.y += self.vy
        self.rotation += self.vr
        # manage thrust animation
        if self.thrust == 1:
            self.setImage(self.thrustframe)
            self.thrustframe += 1
            if self.thrustframe == 4:
                self.thrustframe = 1
        else:
            self.setImage(0)

    def thrustOn(self, event):
        self.thrust = 1
        
    def thrustOff(self, event):
        self.thrust = 0


class SpaceGame(App):
    """
    Tutorial4 space game example.
    """
    def __init__(self):
        super().__init__()
        # Background
        black = Color(0, 1)
        noline = LineStyle(0, black)
        bg_asset = RectangleAsset(self.width, self.height, noline, black)
        bg = Sprite(bg_asset, (0,0))
        SpaceShip((100,100))
        SpaceShip((150,150))
        SpaceShip((200,50))

    def step(self):
        for ship in self.getSpritesbyClass(SpaceShip):
            ship.step()

        
myapp = SpaceGame()
myapp.run()</pre>
<h3>Ggame 程式庫</h3>
<h4>專案目的</h4>
<p>了解 Ggame 的程式庫內容, 除了建立應用範例外, 並能從 <a href="http://www.pixijs.com/gallery">http://www.pixijs.com/gallery</a> 導入更多功能.</p>
<p>在 <a href="https://github.com/mdecourse/kmolgame">kmolgame</a> 倉儲中, 自帶 <a href="https://github.com/mdecourse/kmolgame/tree/gh-pages/static/ggame">https://github.com/mdecourse/kmolgame/tree/gh-pages/static/ggame</a> , 但是 <a href="https://github.com/mdecourse/kmolgame/blob/gh-pages/static/ggame/sysdeps.py">https://github.com/mdecourse/kmolgame/blob/gh-pages/static/ggame/sysdeps.py</a> 中仍存在從 cdn 下載的特定版本程式碼.</p>
<p>因為 Ggame 網際程式庫需要:</p>
<p><span>jquery-3.3.1.min.js - </span><a href="https://jquery.com/">https://jquery.com/</a><span> </span><br/><span>jquery-ui.1.12.1.min.js - </span><a href="https://jqueryui.com/">https://jqueryui.com/</a><span> </span><br/><span>pixi-4.8.2.min.js - </span><a href="http://www.pixijs.com/">http://www.pixijs.com/</a><span> </span> <a href="https://github.com/kittykatattack/learningPixi">learning pixi.js</a><br/><span>buzz-1.2.1.js - </span><a href="http://buzz.jaysalvat.com/">http://buzz.jaysalvat.com/</a><span> </span><br/><span>brython-3.7.0.js - </span><a href="https://brython.info/">https://brython.info/</a><span> </span></p>
<p>等 Javascript 程式庫, 因此最理想的情況下, 必須持續使用最新版的程式庫. 其中最關鍵的應該是 <a href="http://www.pixijs.com/">http://www.pixijs.com/</a> 與 <a href="https://brython.info/">https://brython.info/</a> </p>
<p>因此, 以 Ggame 網際程式庫的研究與開發, 必須導入更多的 <a href="http://www.pixijs.com/">http://www.pixijs.com/</a> 功能, 且能在最新的 <a href="https://brython.info/">https://brython.info/</a> 版本中運行. 並且思考能否援導入 Pixi 的相同流程, 導入類似 <a href="http://schteppe.github.io/cannon.js/">http://schteppe.github.io/cannon.js/</a> 的 Javascript 程式庫.</p>
<p>Pixi Gallery: <a href="http://www.pixijs.com/gallery">http://www.pixijs.com/gallery</a> </p>
<p>目前採用 Ggame 程式庫開發的線上遊戲: <a href="http://mde.tw/kmolgame/spacewar.html">http://mde.tw/kmolgame/spacewar.html</a> </p>
<h4>Games in Pixi.js</h4>
<p>電子書: Learn Pixi.js <a href="https://link.springer.com/book/10.1007/978-1-4842-1094-9">https://link.springer.com/book/10.1007/978-1-4842-1094-9</a> </p>
<p><a href="/downloads/concentration_pixi_game.zip">concentration_pixi_game.zip</a> (<a href="https://www.emanueleferonato.com/2014/02/26/complete-html5-concentration-game-made-with-pixi-js/">ref</a>, <a href="https://www.emanueleferonato.com/2014/03/13/complete-html5-concentration-game-made-with-pixi-js-adding-animation-with-tween-js/">ref2</a>)</p>
<p><a href="https://itch.io/games/made-with-pixijs">https://itch.io/games/made-with-pixijs</a> </p>
<p><a href="https://www.themarketingtechnologist.co/creating-a-lightweight-game-using-pixijs/">https://www.themarketingtechnologist.co/creating-a-lightweight-game-using-pixijs/</a> </p><h3>工程用計算機</h3>
<p><a href="https://github.com/scrum-1/scrum_pyqt5_calculator">https://github.com/scrum-1/scrum_pyqt5_calculator</a> </p>
<p>利用 Eric6 IDE 可以開發單機版的 PyQt5 計算機, 或者擴充為工程用的計算機, 但是就目前的工程運算, 這種模擬早期桌上型計算機的程式, 已經沒有太多功用, 反而若能利用 PyQt5 開發一套能與網際伺服器互動的"工程運算環境", 應該會有較大的開發動機.</p>
<p>看看能否從 <a href="https://github.com/m2n037/awesome-mecheng">https://github.com/m2n037/awesome-mecheng</a> 、<a href="http://www.teamtrotbot.com/mechanism.html">http://www.teamtrotbot.com/mechanism.html</a> 、<a href="https://dogfeatherdesign.com/engineering-projects/mechanisms-mechanical-walker/">https://dogfeatherdesign.com/engineering-projects/mechanisms-mechanical-walker/</a> 與 <a href="http://507movements.com/">http://507movements.com/</a> 找到值得開發的主題.</p><h2>電腦輔助設計</h2>
<h4>六軸機械手臂</h4>
<p>利用 <a href="https://www.onshape.com/">Onshape</a> 與 <a href="http://www.coppeliarobotics.com/">V-rep</a> 驗證 <a href="/downloads/inverse_kinematics.pdf">inverse kinematics.pdf</a> 之運算結果</p>
<h4>平面機構模擬 (Geometric Constrain Solver) 應用</h4>
<p><a href="https://github.com/KmolYuan/python-solvespace">https://github.com/KmolYuan/python-solvespace</a> </p>
<p>在近端利用 Msys2 編譯 GCS 動態程式庫, 之後建立 Python 呼叫範例.</p>
<p>在 Github 嘗試利用 <a href="https://travis-ci.org/">https://travis-ci.org/</a>  進行整合.</p>
<p>tinycadlib 程式庫研究: <a href="https://github.com/KmolYuan/pyslvs/blob/master/src/tinycadlib.pyx">https://github.com/KmolYuan/pyslvs/blob/master/src/tinycadlib.pyx</a> </p>
<p>四連桿運動模擬</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from math import pi, cos, sin, sqrt, acos
import matplotlib.pyplot as plt
 
radian = 180/pi
degree = pi/180
 
#PLAP
def plap(ax, ay, ac, bac, bx, by, pos):
    if pos == 0:
        cx= ac*cos(bac - acos((ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2 + abs(ax - bx)**2 - abs(ay - by)**2)/(2*sqrt(ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2)*abs(ax - bx)))) + ax 
        cy= ac*sin(bac - acos((ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2 + abs(ax - bx)**2 - abs(ay - by)**2)/(2*sqrt(ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2)*abs(ax - bx)))) + ay
    else:
        cx= ac*cos(bac + acos((ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2 + abs(ax - bx)**2 - abs(ay - by)**2)/(2*sqrt(ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2)*abs(ax - bx)))) + ax 
        cy= ac*sin(bac + acos((ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2 + abs(ax - bx)**2 - abs(ay - by)**2)/(2*sqrt(ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2)*abs(ax - bx)))) + ay
    return cx, cy
 
#PLLP
def pllp(ax, ay, ac, cb, bx, by, pos):
    if pos == 0:
        cx =  -((ay - by)*(-ac**2*ay + ac**2*by + ax**2*ay + ax**2*by - 2*ax*ay*bx - 2*ax*bx*by + ay**3 - ay**2*by + ay*bx**2 - ay*by**2 + ay*cb**2 + bx**2*by + by**3 - by*cb**2 - sqrt((-ac**2 + 2*ac*cb + ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2 - cb**2)*(ac**2 + 2*ac*cb - ax**2 + 2*ax*bx - ay**2 + 2*ay*by - bx**2 - by**2 + cb**2))*(ax - bx)) + (ac**2 - ax**2 - ay**2 + bx**2 + by**2 - cb**2)*(ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2))/(2*(ax - bx)*(ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2))
        cy =  (-ac**2*ay + ac**2*by + ax**2*ay + ax**2*by - 2*ax*ay*bx - 2*ax*bx*by + ay**3 - ay**2*by + ay*bx**2 - ay*by**2 + ay*cb**2 + bx**2*by + by**3 - by*cb**2 + sqrt((-ac**2 + 2*ac*cb + ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2 - cb**2)*(ac**2 + 2*ac*cb - ax**2 + 2*ax*bx - ay**2 + 2*ay*by - bx**2 - by**2 + cb**2))*(-ax + bx))/(2*(ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2))
    else:
        cx =  -((ay - by)*(-ac**2*ay + ac**2*by + ax**2*ay + ax**2*by - 2*ax*ay*bx - 2*ax*bx*by + ay**3 - ay**2*by + ay*bx**2 - ay*by**2 + ay*cb**2 + bx**2*by + by**3 - by*cb**2 + sqrt((-ac**2 + 2*ac*cb + ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2 - cb**2)*(ac**2 + 2*ac*cb - ax**2 + 2*ax*bx - ay**2 + 2*ay*by - bx**2 - by**2 + cb**2))*(ax - bx)) + (ac**2 - ax**2 - ay**2 + bx**2 + by**2 - cb**2)*(ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2))/(2*(ax - bx)*(ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2))
        cy =  (-ac**2*ay + ac**2*by + ax**2*ay + ax**2*by - 2*ax*ay*bx - 2*ax*bx*by + ay**3 - ay**2*by + ay*bx**2 - ay*by**2 + ay*cb**2 + bx**2*by + by**3 - by*cb**2 + sqrt((-ac**2 + 2*ac*cb + ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2 - cb**2)*(ac**2 + 2*ac*cb - ax**2 + 2*ax*bx - ay**2 + 2*ay*by - bx**2 - by**2 + cb**2))*(ax - bx))/(2*(ax**2 - 2*ax*bx + ay**2 - 2*ay*by + bx**2 + by**2))
    return cx, cy

def crank_rocker(angle, p1x, p1y, p2x, p2y, len1, len2, len3, len4, len5):
    p4x, p4y = plap(p1x, p1y, len1, angle, p2x, p2y, 0)
    #print("cx=", cx, "cy=", cy)
    p5x, p5y = pllp(p4x, p4y, len2, len3, p2x, p2y, 0)
    #print("dx=", dx, "dy=", dy)
    p3x, p3y = pllp(p4x, p4y, len4, len5, p5x, p5y, 0)
    #print("ex=", ex, "ey=", ey)
    return p3x, p3y
    
#主程式
Xval  = []
Yval  = []
inc = 5

for i in range(0, 360+inc, inc):
    try:
        p3x, p3y = crank_rocker(i*degree, 0, 0, 90, 0, 35, 70, 70, 40, 40)
        Xval += [p3x]
        Yval += [p3y]
        print(i, ":", round(p3x, 4), round(p3y, 4))
    except:
        pass
print ("Solve Completed")

plt.plot(Xval, Yval)
plt.xlabel('x coordinate')
plt.ylabel('y coordinate')
#plt.title("Involute - "+str(degree)+" deg")
plt.show()</pre>
<p>上述四連桿運動模擬, 採用 Solvespace GCS 動態連結程式庫執行運算: <a href="/downloads/sgcs_2_1_py3.7.1.7z">sgcs_2_1_py3.7.1.7z</a> (使用可攜 Python 3.7.1 進行測試)</p>
<h4>參考資料</h4>
<p><a href="https://github.com/AliShug/EvoArm">https://github.com/AliShug/EvoArm</a> </p>
<h4>進階機構模擬與合成議題</h4>
<p><a href="/downloads/機構之構造合成.pdf">機構之構造合成.pdf</a></p>
<p><a href="/downloads/US5253189_QUALITATIVE+KINEMATICS.pdf">QUALITATIVE KINEMATICS 專利</a></p>
<p><a href="/downloads/Automated+Configuration+Analysis+of+Planar+Eight-Bar+Linkages.pdf">Automated Configuration Analysis of Planar Eight-Bar Linkages.pdf</a></p>
<p><a href="/downloads/Automated+Generation+of+Linkage+Loop+Equations+for+Planar+One+Degree-of-Freedom+Linkages,+Demonstrated+up+to+8-Bar.pdf">Automated Generation of Linkage Loop Equations for Planar One Degree-of-Freedom Linkages.pdf</a></p>
<p><a href="/downloads/Automated+Synthesis+of+Planar+Mechanisms+with+Revolute,+Prismatic+and+Pin-In-Slot+Joints.pdf">Automated Synthesis of Planar Mechanisms with Revolute, Prismatic and Pin-In-Slot Joints.pdf</a></p><h3>Kinematics</h3>
<p><a href="/downloads/Robot%20Dynamics and Control.pdf">Robot dynamics and control.pdf</a></p>
<p><a href="https://raw.githubusercontent.com/petercorke/robotics-toolbox-python/master/robot/kinematics.py">https://raw.githubusercontent.com/petercorke/robotics-toolbox-python/master/robot/kinematics.py</a> </p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">"""
Robot kinematic operations.

Python implementation by: Luis Fernando Lara Tobar and Peter Corke.
Based on original Robotics Toolbox for Matlab code by Peter Corke.
Permission to use and copy is granted provided that acknowledgement of
the authors is made.

@author: Luis Fernando Lara Tobar and Peter Corke
"""

from numpy import *
from robot.utility import *
from robot.transform import *
import jacobian as Jac
from numpy.linalg import norm
from numpy.linalg import pinv
from math import *


def fkine(robot, q):
    """
    Computes the forward kinematics for each joint space point defined by C{q}.
    ROBOT is a robot object.

    For an n-axis manipulator C{q} is an n element vector or an m x n matrix of
    robot joint coordinates.

    If C{q} is a vector it is interpretted as the generalized joint coordinates, and
    C{fkine} returns a 4x4 homogeneous transformation for the tool of
    the manipulator.

    If C{q} is a matrix, the rows are interpretted as the generalized 
    joint coordinates for a sequence of points along a trajectory.  q[i,j] is
    the j'th joint parameter for the i'th trajectory point.  In this case
    C{fkine} returns a list of matrices for each point
    along the path.

    The robot's base or tool transform, if present, are incorporated into the
    result.
    
    @type robot: Robot instance
    @param robot: The robot
    @type q: vector
    @param q: joint coordinate
    @see: L{Link}, L{Robot}, L{ikine}
    """

    q = mat(q)
    n = robot.n
    if numrows(q)==1 and numcols(q)==n:
        t = robot.base
        for i in range(0,n):
            t = t * robot.links[i].tr(q[0,i])
        t = t * robot.tool
        return t
    else:
        if numcols(q) != n:
            raise 'bad data'
        t = []
        for qv in q:        # for each trajectory point
            tt = robot.base
            for i in range(0,n):
                tt = tt * robot.links[i].tr(qv[0,i])
            t.append(tt*robot.tool)
        return t



def ikine(robot, tr, q0=None, m=None, **args):
    """
    Inverse manipulator kinematics.
    Computes the joint coordinates corresponding to the end-effector transform C{tr}.
    Typically invoked as

        - Q = IKINE(ROBOT, T)
        - Q = IKINE(ROBOT, T, Q)
        - Q = IKINE(ROBOT, T, Q, M)

    Uniqueness
    ==========
    Note that the inverse kinematic solution is generally not unique, and 
    depends on the initial guess C{q} (which defaults to 0).

    Iterative solution
    ==================
    Solution is computed iteratively using the pseudo-inverse of the
    manipulator Jacobian.

    Such a solution is completely general, though much less efficient 
    than specific inverse kinematic solutions derived symbolically.

    This approach allows a solution to obtained at a singularity, but 
    the joint angles within the null space are arbitrarily assigned.

    Operation on a trajectory
    =========================
    If C{tr} is a list of transforms (a trajectory) then the solution is calculated
    for each transform in turn.  The return values is a matrix with one row for each
    input transform.  The initial estimate for the iterative solution at 
    each time step is taken as the solution from the previous time step.

    Fewer than 6DOF
    ===============
    If the manipulator has fewer than 6 DOF then this method of solution
    will fail, since the solution space has more dimensions than can
    be spanned by the manipulator joint coordinates.  In such a case
    it is necessary to provide a mask matrix, C{m}, which specifies the 
    Cartesian DOF (in the wrist coordinate frame) that will be ignored
    in reaching a solution.  The mask matrix has six elements that
    correspond to translation in X, Y and Z, and rotation about X, Y and
    Z respectively.  The value should be 0 (for ignore) or 1.  The number
    of non-zero elements should equal the number of manipulator DOF.

    For instance with a typical 5 DOF manipulator one would ignore
    rotation about the wrist axis, that is, M = [1 1 1 1 1 0].


    @type robot: Robot instance
    @param robot: The robot
    @type tr: homgeneous transformation
    @param tr: End-effector pose
    @type q: vector
    @param q: initial estimate of joint coordinate
    @type m: vector
    @param m: mask vector
    @rtype: vector
    @return: joint coordinate
    @see: L{fkine}, L{tr2diff}, L{jacbo0}, L{ikine560}
    """
     
    #solution control parameters

    print 'args', args
    
    n = robot.n

    
    if q0 == None:
        q0 = mat(zeros((n,1)))
    else:
        q0 = mat(q0).flatten().T
        
    if q0 != None and m != None:
        m = mat(m).flatten().T
        if len(m)!=6:
            error('Mask matrix should have 6 elements')
        if len(m.nonzero()[0].T)!=robot.n:
            error('Mask matrix must have same number of 1s as robot DOF')
    else:
        if n&lt;6:
            print 'For a manipulator with fewer than 6DOF a mask matrix argument should be specified'
        m = mat(ones((6,1)))

    def solve(robot, tr, q, mask, ilimit=1000, stol=1e-6, gamma=1):
        print ilimit, stol, gamma
        nm = inf;
        count = 0
        while nm &gt; stol:
            e = multiply( tr2diff(fkine(robot, q.T),tr), mask )
            #dq = pinv(Jac.jacob0(robot, q.T)) * e
            dq = Jac.jacob0(robot, q.T).T * e
            q += gamma*dq;
            nm = norm(e)
            count += 1
            if count &gt; ilimit:
                error("Solution wouldn't converge")
        print count, 'iterations'
        return q;

    if isinstance(tr, list):
        #trajectory case
        qt = mat(zeros((0,n)))
        for T in tr:
            q = solve(robot, T, q0, m, **args);
            qt = vstack( (qt, q.T) )
        return qt;
    elif ishomog(tr):
        #single xform case
        q = solve(robot, tr, q0, m, **args);
        print q
        qt = q.T
        return qt
    else:
        error('tr must be 4*4 matrix')


def ikine560(robot, T, configuration=''):
    """
    Inverse kinematics for Puma 560-like robot, ie. 6-axis with a spherical wrist.

    The optional C{configuration} argument specifies the configuration of the arm in
    the form of a string containing one or more of the configuration codes
       - 'l' or 'r'    lefty/righty
       - 'u' or 'd'    elbow
       - 'n' or 'f'    wrist flip or noflip.

    The default configuration is 'lun'.
    
    Reference
    =========

    Inverse kinematics for a PUMA 560 based on the equations by Paul and Zhang
    From The International Journal of Robotics Research
    Vol. 5, No. 2, Summer 1986, p. 32-44.

    @author: Robert Biro (gt2231a@prism.gatech.edu) with Gary Von McMurray, GTRI/ATRP/IIMB, Georgia Institute of Technology, 2/13/95.

    @type robot: Robot instance
    @param robot: The robot
    @type T: homgeneous transformation
    @param T: End-effector pose
    @type configuration: string
    @param configuration: manipulator configuration comprising the letters: lrudnf
    @rtype: vector
    @return: joint coordinate
    """

    if robot.n != 6:
        error('Solution only applicable for 6DOF manipulator');

    if robot.mdh:
        error('Solution only applicable for standard DH conventions');


    # recurse over a list of transforms
    if isinstance(T, list):
        theta = [];
        for t in T:
            theta.append( ikine560(robot, t, configuration) );

        return theta;

    if not ishomog(T):
        error('T is not a homog xform');
        
    L = robot.links;
    a1 = L[0].A;
    a2 = L[1].A;
    a3 = L[2].A;

    for i in range(3, 6):
        if L[i].A != 0:
            error('wrist is not spherical')

    d1 = L[0].D;
    d2 = L[1].D;
    d3 = L[2].D;
    d4 = L[3].D;


    # undo base transformation
    T = linalg.inv(robot.base) * T;

    # The following parameters are extracted from the Homogeneous 
    # Transformation as defined in equation 1, p. 34

    Ox = T[0,1];
    Oy = T[1,1];
    Oz = T[2,1];

    Ax = T[0,2];
    Ay = T[1,2];
    Az = T[2,2];

    Px = T[0,3];
    Py = T[1,3];
    Pz = T[2,3];

    # The configuration parameter determines what n1,n2,n4 values are used
    # and how many solutions are determined which have values of -1 or +1.

    configuration = configuration.lower();

    n1 = -1;    # L
    n2 = -1;    # U
    n4 = -1;    # N
    if 'l' in configuration:
        n1 = -1;

    if 'r' in configuration:
        n1 = 1;

    if 'u' in configuration:
        if n1 == 1:
            n2 = 1;
        else:
            n2 = -1;

    if 'd' in configuration:
        if n1 == 1:
            n2 = -1;
        else:
            n2 = 1;

    if 'n' in configuration:
        n4 = 1;

    if 'f' in configuration:
        n4 = -1;


    theta = zeros( (6,1) );
    
    #
    # Solve for theta(1)
    # 
    # r is defined in equation 38, p. 39.
    # theta(1) uses equations 40 and 41, p.39, 
    # based on the configuration parameter n1
    #

    r = sqrt(Px**2 + Py**2);
    if n1 == 1:
        theta[0] = atan2(Py,Px) + asin(d3/r);
    else:
        theta[0] = atan2(Py,Px) + pi - asin(d3/r);


    #
    # Solve for theta(2)
    #
    # V114 is defined in equation 43, p.39.
    # r is defined in equation 47, p.39.
    # Psi is defined in equation 49, p.40.
    # theta(2) uses equations 50 and 51, p.40, based on the configuration 
    # parameter n2
    #

    V114 = Px*cos(theta[0]) + Py*sin(theta[0]);
    r = sqrt(V114**2 + Pz**2);

    x = (a2**2-d4**2-a3**2+V114**2+Pz**2) / (2.0*a2*r);
    if abs(x) &gt; 1:
        error('point not reachable');
    Psi = acos(x);

    theta[1] = atan2(Pz,V114) + n2*Psi;

    #
    # Solve for theta(3)
    #
    # theta(3) uses equation 57, p. 40.
    #

    num = cos(theta[1])*V114+sin(theta[1])*Pz-a2;
    den = cos(theta[1])*Pz - sin(theta[1])*V114;
    theta[2] = atan2(a3,d4) - atan2(num, den);

    #
    # Solve for theta(4)
    #
    # V113 is defined in equation 62, p. 41.
    # V323 is defined in equation 62, p. 41.
    # V313 is defined in equation 62, p. 41.
    # theta(4) uses equation 61, p.40, based on the configuration 
    # parameter n4
    #

    V113 = cos(theta[0])*Ax + sin(theta[0])*Ay;
    V323 = cos(theta[0])*Ay - sin(theta[0])*Ax;
    V313 = cos(theta[1]+theta[2])*V113 + sin(theta[1]+theta[2])*Az;
    theta[3] = atan2((n4*V323),(n4*V313));
    #[(n4*V323),(n4*V313)]

    #
    # Solve for theta(5)
    #
    # num is defined in equation 65, p. 41.
    # den is defined in equation 65, p. 41.
    # theta(5) uses equation 66, p. 41.
    #
     
    num = -cos(theta[3])*V313 - V323*sin(theta[3]);
    den = -V113*sin(theta[1]+theta[2]) + Az*cos(theta[1]+theta[2]);
    theta[4] = atan2(num,den);
    #[num den]

    #
    # Solve for theta(6)
    #
    # V112 is defined in equation 69, p. 41.
    # V122 is defined in equation 69, p. 41.
    # V312 is defined in equation 69, p. 41.
    # V332 is defined in equation 69, p. 41.
    # V412 is defined in equation 69, p. 41.
    # V432 is defined in equation 69, p. 41.
    # num is defined in equation 68, p. 41.
    # den is defined in equation 68, p. 41.
    # theta(6) uses equation 70, p. 41.
    #

    V112 = cos(theta[0])*Ox + sin(theta[0])*Oy;
    V132 = sin(theta[0])*Ox - cos(theta[0])*Oy;
    V312 = V112*cos(theta[1]+theta[2]) + Oz*sin(theta[1]+theta[2]);
    V332 = -V112*sin(theta[1]+theta[2]) + Oz*cos(theta[1]+theta[2]);
    V412 = V312*cos(theta[3]) - V132*sin(theta[3]);
    V432 = V312*sin(theta[3]) + V132*cos(theta[3]);
    num = -V412*cos(theta[4]) - V332*sin(theta[4]);
    den = - V432;
    theta[5] = atan2(num,den);
    #[num den]
    
    return mat(theta).T;</pre>
<h4>IKBT</h4>
<p><a href="https://github.com/uw-biorobotics/IKBT">https://github.com/uw-biorobotics/IKBT</a> </p>
<p><a href="/downloads/solving%20closed-form Inverse Kinematics with Behavior Tree.pdf">Solving closed-form Inverse Kinematics with Behavior Tree.pdf</a></p><h1>設計主機</h1>
<h4>自架主機</h4>
<p>工作站室 Ubuntu + Flask + Fossil SCM</p>
<p>協同設計室 Ubuntu + Flask + Fossil SCM</p>
<h4>雲端主機</h4>
<p>Heroku 雲端主機 Flask</p>
<p>Github 倉儲主機 Html + Javascript + Brython</p>
<p>Gitlab 倉儲主機 Html + Javascript + Brython</p>
<p>Bitbucket 倉儲主機 Html + Javascript + Brython</p>
<p></p><h2>Heroku 簡介</h2>
<p><iframe allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/QTOkqzCTGxw" width="560"></iframe></p>
<p><iframe allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/nRiykxq0oHQ" width="560"></iframe></p>
<p></p><h3>Heroku 設定</h3>
<p>在 <a href="http://mde.tw">http://mde.tw</a> 相關課程中, <a href="https://www.heroku.com/">Heroku</a>  雲端服務與 Github 倉儲中的 <a href="https://pages.github.com/">Github Pages</a> 分別扮演動態程式網站與靜態超文件網站伺服.</p>
<p>此地所謂的動態程式網站伺服, 指的是利用 <a href="http://flask.pocoo.org/">Flask</a> 程式框架, 建立 <a href="https://en.wikipedia.org/wiki/Web_Server_Gateway_Interface">Web Server Gateway  Interface</a> 架構的程式環境.</p>
<p>而靜態超文件網站伺服, 則包含一個 <a href="https://en.wikipedia.org/wiki/World_Wide_Web">WWW</a> 伺服器, 得以讓使用者透過瀏覽器, 擷取伺服器上的 <a href="https://en.wikipedia.org/wiki/HTML">html</a> 與 <a href="https://en.wikipedia.org/wiki/JavaScript">JavaScript</a> 程式, 且 <a href="https://en.wikipedia.org/wiki/JavaScript">JavaScript</a> 是下載到近端之後, 使用近端的硬體執行.</p>
<p>以下說明如何在近端利用可攜 <a href="https://devcenter.heroku.com/articles/heroku-cli">Heroku cli</a> 建立能與 <a href="https://github.com/">Github</a> 倉儲同步的動態雲端網站.</p>
<h4>在 Heroku 登記一個帳號</h4>
<p>利用電子郵箱, 在 <a href="https://www.heroku.com/">https://www.heroku.com/</a> 登記一個免費帳號, 在完成電子郵箱驗證後, 即可進入 Dashboard 新增一個應用程式.  而該應用程式名稱必須具備唯一性, 因為完成後, 即可建立 "應用程式名稱".herokuapp.com 網站.</p>
<p>接著進入該應用程式對應的 Settings 頁面, 可以查詢該應用程式的 git 倉儲對應 URL, 以及應用程式的網站名稱.</p>
<p>接下來, 則必須在可攜程式系統中配置 <a href="https://devcenter.heroku.com/articles/heroku-cli">Heroku cli</a> 環境, 以便利用 heroku login, heroku logs 等指令, 登入 <a href="https://www.heroku.com/">Heroku</a> 系統, 取得 git clone 與 push 或 pull 權限.</p>
<p>但是在此處, 隨後將在應用程式對應的 Deploy, 以 auto deploy 的自動部署, 讓特定的 Github repository 與 <a href="https://www.heroku.com/">Heroku</a> 的應用程式倉儲自動同步, 多人協同下的 Github 倉儲一旦改版, <a href="https://www.heroku.com/">Heroku</a> 動態網站將會自動保持同步.</p>
<h4>新增可攜 Heroku cli 客戶端</h4>
<p>下載 Heroku cli 可攜客戶端: <a href="https://drive.google.com/open?id=1mF84E-eskZTEa-blnrfT1m1JzbJ_1W77">heroku/7.18.9 win32-x64 node-v11.1.0</a></p>
<p>將檔案在 y:\ 中解開壓縮後, 修改 path 設定, 納入 %Disk%:\heroku\bin, 以便在隨身系統中執行 heroku cli 指令.</p>
<h4>利用 runtime.txt 指定 Python 版本</h4>
<p>runtime.txt 指定 Python 執行版本:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">python-3.7.1</pre>
<h4>利用 Procfile 指定啟動程式物件</h4>
<p>Procfile 宣告由 flaskapp.py 中的 app 執行動態程式:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">web gunicorn flaskapp:app</pre>
<h4>利用 requirements.txt 安裝所需模組</h4>
<p>requirements.txt 宣告執行動態程式所需要安裝的模組:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">Flask==1.0.2
gunicorn==19.7.1
Jinja2==2.10
MarkupSafe==1.0
Werkzeug==0.14.1
beautifulsoup4==4.6.0</pre>
<h4>在 Heroku Deploy 頁面設定與 Github 倉儲自動同步</h4>
<p><img alt="" height="275" src="/images/heroku_auto_deploy_with_github.png" width="600"/></p>
<p>設定完成後的動態網頁: <a href="http://cp2018-bgx.herokuapp.com/">http://cp2018-bgx.herokuapp.com/</a> </p>
<p>靜態網頁: <a href="https://mdecp2018.github.io/finalproject-bgx">https://mdecp2018.github.io/finalproject-bgx</a> </p>
<p>可用於多人協同的 Github 倉儲: <a href="https://github.com/mdecp2018/finalproject-bgx">https://github.com/mdecp2018/finalproject-bgx</a> </p><h2>Fossil SCM</h2>
<p><a href="https://fossil-scm.org">https://fossil-scm.org</a> </p>
<p><a href="http://mde.tw/2017springcd/blog/intro-fossil-scm.html">http://mde.tw/2017springcd/blog/intro-fossil-scm.html</a> </p>
<p><a href="http://mde.tw/2017springwcm/blog/2017spring-ubuntu-stunnel-fossil.html">http://mde.tw/2017springwcm/blog/2017spring-ubuntu-stunnel-fossil.html</a> </p>
<h2>Jupyterlab</h2>
<p><a href="https://github.com/jupyterlab/jupyterlab">https://github.com/jupyterlab/jupyterlab</a></p><h2>Sandstorm</h2>
<p><a href="https://github.com/sandstorm-io/sandstorm">https://github.com/sandstorm-io/sandstorm</a> </p><h1>Python 程式</h1>
<h4>從基本語法到 GUI 程式</h4>
<p><a href="https://pythonspot.com/">https://pythonspot.com/</a> </p>
<p>整理 <a href="https://www.cs.cmu.edu/~112/schedule.html">https://www.cs.cmu.edu/~112/schedule.html</a> 中的 內容.</p>
<h4>結合既有 C/C++ 程式</h4>
<p>從 <a href="http://www.swig.org/">SWIG</a> 到 <a href="https://github.com/StatisKit/AutoWIG">AutoWIG</a>, 使用者可以將既有的 C/C++ 程式庫轉成可為 Python 程式呼叫的動態連結程式庫.</p>
<p>也可以利用 <a href="https://cython.org/">Cython</a> 技術提升 Python 程式效能.</p>
<p><a href="http://www.swig.org/">SWIG</a> 範例:</p>
<p><a href="https://github.com/StatisKit/AutoWIG">AutoWIG</a> 介紹:</p>
<p><a href="/downloads/AutoWIG%20- Automatic Generation of Python Bindings for C++ Libraries.pdf">AutoWIG: Automatic Generation of Python Bindings for C++ Libraries.pdf</a></p>
<p><a href="/downloads/AutoWIG%20- Automatic Generation of Python Bindings for C++ Libraries2.pdf">AutoWIG - automatic generation of python bindings for C++ libraries2.pdf</a></p>
<p><iframe allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/N4q_Vud77Hw" width="560"></iframe></p>
<p><a href="https://cython.org/">Cython</a> 範例:</p>
<p></p>
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["py_src"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<h4>開始練習 print() 用法, 並著手建立函式</h4>
<p><!-- 印出版次與關鍵字程式 --></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace

# Brython 3.3.4 內建的 container 名稱為  'container' 且 turtle 輸出為 svg 必須使用 div 訂定 id
Ace = ace.Editor(editor_id="kw_editor", console_id="kw_console", container_id="kw__container", storage_id="kw_py_src" )

Ace.editor.setValue("""# 導入 sys 模組
import sys
# 導入 keyword 模組
import keyword

def helloWorld():
    print("Hello World!")

helloWorld()

# 利用 sys 模組中的 version_info 印出 Python 版次
print("Python version: ", sys.version_info)
# 利用 keyword 模組中的 kwlist 印出關鍵字
print("Python keywords: ", keyword.kwlist)
""")
Ace.editor.scrollToRow(0)
Ace.editor.gotoLine(0)

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run'].bind('click', Ace.run)
doc['kw_show_console'].bind('click', Ace.show_console)
doc['kw_clear_console'].bind('click', Ace.clear_console)
</script>
</p>
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src', 'kw_filename');" type="submit" value="Save"/></form>
<p><button id="kw_run">Run</button> <button id="kw_show_console">Output</button> <button id="kw_clear_console">清除</button></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console"></textarea></div>
<p><!-- ****************************** keyword start -->
<script type="text/python3">
from browser import document as doc
# 導入位於 static 目錄下的 beditor.py 
import beditor
# 利用 beditor.py 中的 editor 類別建立案例, 對應到 kw1
kw1 = beditor.editor("""# 導入 sys 模組
import sys
# 導入 keyword 模組
import keyword

# 利用 sys 模組中的 version_info 印出 Python 版次
print("Python version: ", sys.version_info)
# 利用 keyword 模組中的 kwlist 印出關鍵字
print("Python keywords: ", keyword.kwlist)
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "keyword" 的按鈕點按時, 執行 kw1 物件中的 prog 方法
doc["keyword"].bind('click', kw1.prog)
</script>
</p>
<p><!-- ****************************** keyword end --></p>
<p><!-- ***************************** slide ex1 start --></p>
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Ex1 = beditor.editor("""# 導入 Ex1 原始碼
a = 0
def my_print(n, input_str):
    print("以下將重覆列印 '", input_str + "' " + str(n) + "次")
    for i in range(n):
        print(i, input_str)

my_print(5, "Hello World!")
the_str = "開始學習 Python"
num = input("請輸入要列印的次數!")
my_print(int(num), the_str)
a = a + 1
print("(" + str(a) + ")", "_" * 25)

def myfun():
    yield 1
    yield 2
    yield 3

for i in myfun():
    print(i)

x = iter(myfun())
y = list(myfun())

a = a + 1
print("(" + str(a) + ")", "_" * 25)
print(x.__next__())
print(x.__next__())
print(x.__next__())
print(y)
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "ex1" 的按鈕點按時, 執行 Ex1 物件中的 prog 方法
doc["ex1"].bind('click', Ex1.prog)
</script>
</p>
<p><!-- ***************************** slide ex1 end --></p>
<p><!-- ***************************** slide ex2 start --></p>
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Ex2 = beditor.editor("""# Python 的內建資料型別
import math
def f():
    print("This is a user-defined function")
    return 42

print("Some basic types in Python:")
print(type(2))           # int
print(type(2.2))         # float
print(type("2.2"))       # str  (string)
print(type(2 < 2.2))     # bool (boolean)
print(type(math))        # module
print(type(math.tan))    # builtin_function_or_method ("function" in Brython)
print(type(f))           # function (user-defined function)
print(type(type(42)))    # type

print("#####################################################")

print("And some other types we will see later in the course...")
print(type(Exception())) # Exception
print(type(range(5)))    # range
print(type([1,2,3]))     # list
print(type((1,2,3)))     # tuple
print(type({1,2}))       # set
print(type({1:42}))      # dict (dictionary or map)
print(type(2+3j))        # complex  (complex number) (we may not see this type)
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "ex2" 的按鈕點按時, 執行 Ex2 物件中的 prog 方法
doc["ex2"].bind('click', Ex2.prog)
</script>
</p>
<p><!-- ***************************** slide ex2 end --></p>
<p><!-- ***************************** slide ex3 start --></p>
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Ex3 = beditor.editor("""# Python 的內建常數與函式
# 內建常數
print("Some builtin constants:")
print(True)
print(False)
print(None)

print("And some more constants in the math module:")
import math
print(math.pi)
print(math.e)
# 內建函式
print("Type conversion functions:")
print(bool(0))   # convert to boolean (True or False)
print(float(42)) # convert to a floating point number
print(int(2.8))  # convert to an integer (int)

print("And some basic math functions:")
print(abs(-5))   # absolute value
print(max(2,3))  # return the max value
print(min(2,3))  # return the min value
print(pow(2,3))  # raise to the given power (pow(x,y) == x**y)
print(round(2.354, 1)) # round with the given number of digits
# other examples
print(3 * 2)
print(3 * "abc")
print(3 + 2)
print("abc" + "def")
print(3 + "def")
# Type Affect Semantics
print(3 * 2)
print(3 * "abc")
print(3 + 2)
print("abc" + "def")
print(3 + "def")
# Integer Division
print("The / operator does 'normal' float division:")
print(" 5/3  =", ( 5/3))
print()
print("The // operator does integer division:")
print(" 5//3 =", ( 5//3))
print(" 2//3 =", ( 2//3))
print("-1//3 =", (-1//3))
print("-4//3 =", (-4//3))
# Modulus or Remainder Operator (%)
print(" 6%3 =", ( 6%3))
print(" 5%3 =", ( 5%3))
print(" 2%3 =", ( 2%3))
print(" 0%3 =", ( 0%3))
print("-4%3 =", (-4%3))
print(" 3%0 =", ( 3%0))
# Verify that (a%b) is equivalent to (a-(a//b)*b)
def mod(a, b):
  return a - (a//b)*b
print(41%14, mod(41,14))
print(14%41, mod(14,41))
print(-32%9, mod(-32,9))
print(32%-9, mod(32,-9))
# Operator Order (Precedence and Associativity)
print("Precedence:")
print(2+3*4)  # prints 14, not 20
print(5+4%3)  # prints  6, not 0 (% has same precedence as *, /, and //)
print(2**3*4) # prints 32, not 4096 (** has higher precedence than *, /, //, and %)

print()

print("Associativity:")
print(5-4-3)   # prints -2, not 4 (- associates left-to-right)
print(4**3**2) # prints 262144, not 4096 (** associates right-to-left)
# Approximate Values of Floating-Point Numbers
print(0.1 + 0.1 == 0.2)        # True, but...
print(0.1 + 0.1 + 0.1 == 0.3)  # False!
print(0.1 + 0.1 + 0.1)         # prints 0.30000000000000004 (uh oh)
print((0.1 + 0.1 + 0.1) - 0.3) # prints 5.55111512313e-17 (tiny, but non-zero!)
# Equality Testing with math.isclose
print("The problem....")
d1 = 0.1 + 0.1 + 0.1
d2 = 0.3
print(d1 == d2)                # False (never use == with floats!)

print()
print("The solution...")
import math
print(math.isclose(d1, d2))  # True!
# math.isclose checks if the two numbers are ALMOST equal, within a small error
# Short-Circuit Evaluation
def yes():
    return True

def no():
    return False

def crash():
    return 1/0 # crashes!

print(no() and crash()) # Works!
print(crash() and no()) # Crashes!
print (yes() and crash()) # Never runs (due to crash), but would also crash (without short-circuiting)
# Or operator
def yes():
    return True

def no():
    return False

def crash():
    return 1/0 # crashes!

print(yes() or crash()) # Works!
print(crash() or yes()) # Crashes!
print(no() or crash())  # Never runs (due to crash), but would also crash (without short-circuiting)
# more examples
def isPositive(n):
    result = (n > 0)
    print("isPositive(",n,") =", result)
    return result

def isEven(n):
    result = (n % 2 == 0)
    print("isEven(",n,") =", result)
    return result

print("Test 1: isEven(-4) and isPositive(-4))")
print(isEven(-4) and isPositive(-4)) # Calls both functions
print("----------")
print("Test 2: isEven(-3) and isPositive(-3)")
print(isEven(-3) and isPositive(-3)) # Calls only one function!
# type vs isinstance
# Both type and isinstance can be used to type-check
# In general, (isinstance(x, T)) will be more robust than (type(x) == T)

print(type("abc") == str)
print(isinstance("abc", str))

# We'll see better reasons for this when we cover OOP + inheritance later
# in the course.  For now, here is one reason:  say you wanted to check
# if a value is any kind of number (int, float, complex, etc). 
# You could do:

def isNumber(x):
    return ((type(x) == int) or
            (type(x) == float)) # are we sure this is ALL kinds of numbers?

print(isNumber(1), isNumber(1.1), isNumber(1+2j), isNumber("wow"))

# But this is cleaner, and works for all kinds of numbers, including
# complex numbers for example:

import numbers
def isNumber(x):
    return isinstance(x, numbers.Number) # works for any kind of number

print(isNumber(1), isNumber(1.1), isNumber(1+2j), isNumber("wow"))
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "ex3" 的按鈕點按時, 執行 Ex3 物件中的 prog 方法
doc["ex3"].bind('click', Ex3.prog)
</script>
</p>
<p><!-- ***************************** slide ex3 end --></p>
<p><!-- ***************************** slide ex4 start --></p>
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Ex4 = beditor.editor("""# Python 函式
# Vocabulary
x = 5
def f(y, z):
    result = x + y + z
    return result
print(f(1, 2)) # 8
print(f(3, 4)) # 12

# Vocabulary:
#   variables: global vs. local
#   statements vs. expressions
#   function definitions vs. function calls
#   parameters vs. arguments

# Return Statements
# Basic example

def isPositive(x):
    return (x > 0)

print(isPositive(5))  # True
print(isPositive(-5)) # False
print(isPositive(0))  # False

# Return ends the function immediately
def isPositive(x):
    print("Hello!")   # runs
    return (x > 0)
    print("Goodbye!") # does not run ("dead code")

print(isPositive(5))  # prints Hello, then True

# No return statement --> return None
def f(x):
    x + 42

print(f(5)) # None

def f2(x):
    result = x + 42

print(f2(5)) # None

# Print versus Return
# This is a common early mistake (confusing print and return):
def cubed(x):
    print(x**3) # Here is the error!

cubed(2)          # seems to work!
print(cubed(3))   # sort of works (but prints None, which is weird)
print(2*cubed(4)) # Error!

# Once again (correctly)
def cubed2(x):
    return (x**3) # That's better!

cubed2(2)          # seems to be ignored (why?)
print(cubed2(3))   # works!
print(2*cubed2(4)) # works!

# Different Parameter and Return Types
def hypotenuse(a, b):
    return ((a**2) + (b**2))**0.5

print(hypotenuse(3, 4)) # 5.0 (not 5)
print("---------------------")

def xor(b1, b2):
    return ((b1 and (not b2)) or (b2 and (not b1)))  # same as (b1 != b2)

print(xor(True,  True))  # False
print(xor(True,  False)) # True
print(xor(False, True))  # True
print(xor(False, False)) # False
print("---------------------")

def isPositive(n):
    return (n > 0)

print(isPositive(10))     # True
print(isPositive(-1.234)) # False

# Function Composition
def f(w):
    return 10*w

def g(x, y):
    return f(3*x) + y

def h(z):
    return f(g(z, f(z+1)))

print(h(1)) # hint: try the "visualize" feature

# Helper Functions 
def onesDigit(n):
    return n%10

def largerOnesDigit(x, y):
    return max(onesDigit(x), onesDigit(y))

print(largerOnesDigit(134, 672)) # 4
print(largerOnesDigit(132, 674)) # Still 4

# Test Functions
# A broken test function
def onesDigit(n):
    return n%10

def testOnesDigit():
    print("Testing onesDigit()...", end="")
    assert(onesDigit(5) == 5)
    assert(onesDigit(123) == 3)
    assert(onesDigit(100) == 0)
    assert(onesDigit(999) == 9)
    print("Passed!")

testOnesDigit() # Passed!  Why is this bad?

# A better version
def onesDigit2(n):
    return n%10

def testOnesDigit2():
    print("Testing onesDigit()...", end="")
    assert(onesDigit2(5) == 5)
    assert(onesDigit2(123) == 3)
    assert(onesDigit2(100) == 0)
    assert(onesDigit2(999) == 9)
    assert(onesDigit2(-123) == 3) # Added this test
    print("Passed!")

testOnesDigit2() # Crashed!  So the test function worked!

# Local Variable Scope
def f(x):
    print("In f, x =", x)
    x += 5
    return x

def g(x):
    return f(x*2) + f(x*3)

print(g(2))

# Another example
def f(x):
    print("In f, x =", x)
    x += 7
    return round(x / 3)

def g(x):
    x *= 10
    return 2 * f(x)

def h(x):
    x += 3
    return f(x+4) + g(x)

print(h(f(1)))

# Global Variable Scope
# In general, you should avoid using global variables.
# You will even lose style points if you use them!
# Still, you need to understand how they work, since others
# will use them, and there may also be some very few occasions
# where you should use them, too!

g = 100

def f(x):
    return x + g

print(f(5)) # 105
print(f(6)) # 106
print(g)    # 100

# Another exampl
g = 100

def f(x):
    # If we modify a global variable, we must declare it as global.
    # Otherwise, Python will assume it is a local variable.
    global g
    g += 1
    return x + g

print(f(5)) # 106
print(f(6)) # 108
print(g)    # 102

# Default arguments
# Sometimes, a function has a parameter that has a natural default
# We can specify that default value in the function definition,
# then choose whether or not to include it in the function call.

def f(x, y=10):
    return x + y

print(f(5))   # 15
print(f(5,1)) # 6
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "ex3" 的按鈕點按時, 執行 Ex3 物件中的 prog 方法
doc["ex4"].bind('click', Ex4.prog)
</script>
</p>
<p><!-- ***************************** slide ex4 end --></p>
<p><button id="keyword">Keyword</button><button id="ex1">Ex1</button><button id="ex2">Ex2</button><button id="ex3">Ex3</button><button id="ex4">Ex4</button></p><h2>靜態網站範例</h2>
<h4>Brython</h4>
<p style="padding-left: 30px;"><a href="https://groups.google.com/forum/#!forum/brython">https://groups.google.com/forum/#!forum/brython</a> </p>
<p><a href="https://github.com/mdecourse/webgame">https://github.com/mdecourse/webgame</a> </p>
<p><a href="http://mde.tw/webgame/spacewar.html">http://mde.tw/webgame/spacewar.html</a> </p>
<p><a href="http://mde.tw/reeborg2016/reeborg.html?lang=en&amp;mode=python">http://mde.tw/reeborg2016/reeborg.html?lang=en&amp;mode=python</a> </p><h2>動態網站範例</h2>
<p><a href="https://github.com/mdecourse/wcms-scrum1">https://github.com/mdecourse/wcms-scrum1</a> </p>
<p>從計算機程式 (Computer Programming) 到電腦輔助機械設計(Computer Aided Mechanical Design)</p>
<p>猜數字遊戲: <a href="https://wcms-scrum1.herokuapp.com/">https://wcms-scrum1.herokuapp.com/</a> </p>
<p>2D 國旗繪圖: <a href="https://wcms-scrum1.herokuapp.com/drawflag">https://wcms-scrum1.herokuapp.com/drawflag</a> </p>
<p>2D 五芒星繪圖: <a href="https://wcms-scrum1.herokuapp.com/drawstar">https://wcms-scrum1.herokuapp.com/drawstar</a> </p>
<p>2D 曲線繪圖加滑鼠操作: <a href="https://wcms-scrum1.herokuapp.com/drag">https://wcms-scrum1.herokuapp.com/drag</a> </p>
<p>正齒輪齒面寬設計: <a href="https://wcms-scrum1.herokuapp.com/gear_index">https://wcms-scrum1.herokuapp.com/gear_index</a> </p><h2>GUI 程式範例</h2>
<h4>Leo Editor</h4>
<p style="padding-left: 30px;"><a href="https://groups.google.com/forum/#!forum/leo-editor">https://groups.google.com/forum/#!forum/leo-editor</a> </p>
<p style="padding-left: 30px;"><a href="https://github.com/flexxui/pscript">https://github.com/flexxui/pscript</a> </p>
<p style="padding-left: 30px;"><a href="https://github.com/flexxui/flexx">https://github.com/flexxui/flexx</a> </p>
<p><a href="https://github.com/kmolab/pymcadp">https://github.com/kmolab/pymcadp</a> </p>
<p><a href="https://github.com/goldsborough/Writer-Tutorial">https://github.com/goldsborough/Writer-Tutorial</a>  (<a href="https://www.binpress.com/building-text-editor-pyqt-1/">https://www.binpress.com/building-text-editor-pyqt-1/</a>) </p>
<p><a href="https://github.com/mfitzp/15-minute-apps">https://github.com/mfitzp/15-minute-apps</a> </p>
<p><a href="https://github.com/Ultimaker/Cura">https://github.com/Ultimaker/Cura</a> </p>
<p><a href="https://github.com/maicss/PyQt5-Chinese-tutoral">https://github.com/maicss/PyQt5-Chinese-tutoral</a> </p>
<p><a href="https://github.com/skinex/CRUD-SQLite-">https://github.com/skinex/CRUD-SQLite-</a> </p>
<p><a href="https://github.com/LewisTian/PyQt5-Apps">https://github.com/LewisTian/PyQt5-Apps</a> </p>
<h3>GUI 程式碼</h3>
<h4>擷取網站 html 檔案</h4>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">def render(url):
    """Fully render HTML, JavaScript and all."""

    import sys
    from PyQt5.QtCore import QEventLoop,QUrl
    from PyQt5.QtWidgets import QApplication
    from PyQt5.QtWebEngineWidgets import QWebEngineView

    class Render(QWebEngineView):
        def __init__(self, url):
            self.html = None
            self.app = QApplication(sys.argv)
            QWebEngineView.__init__(self)
            self.loadFinished.connect(self._loadFinished)
            self.load(QUrl(url))
            while self.html is None:
                self.app.processEvents(QEventLoop.ExcludeUserInputEvents | QEventLoop.ExcludeSocketNotifiers | QEventLoop.WaitForMoreEvents)
            self.app.quit()

        def _callable(self, data):
            self.html = data

        def _loadFinished(self, result):
            self.page().toHtml(self._callable)

    return Render(url).html

dummy_url = "http://mde.tw/"
print(render(dummy_url))</pre>
<h4>顯示網站內容</h4>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># coding: utf-8

import sys
import os

from PyQt5 import (
    QtCore, 
    QtWidgets, 
    QtWebEngineWidgets
)

app = QtWidgets.QApplication(sys.argv)
view = QtWebEngineWidgets.QWebEngineView()

'''
view.load(QtCore.QUrl().fromLocalFile(
    os.path.split(os.path.abspath(__file__))[0]+r'\html\test.html'
))
'''
view.load(QtCore.QUrl("http://mde.tw"))

view.show()
sys.exit(app.exec())</pre>
<p></p><h3>parse_content 範例</h3>
<p>電子書: Website Scraping with Python Using BeautifulSoup and Scrapy <a href="https://link.springer.com/book/10.1007/978-1-4842-3925-4">https://link.springer.com/book/10.1007/978-1-4842-3925-4</a> </p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import os
import bs4

def _remove_h123_attrs(soup):
    tag_order = 0
    for tag in soup.find_all(['h1', 'h2', 'h3']):
        # 假如標註內容沒有字串
        #if len(tag.text) == 0:
        if len(tag.contents) ==0:
            # 且該標註為排序第一
            if tag_order == 0:
                tag.string = "First"
            else:
                # 若該標註非排序第一, 則移除無內容的標題標註
                tag.extract()
        # 針對單一元件的標題標註
        elif len(tag.contents) == 1:
            # 若內容非為純文字, 表示內容為其他標註物件
            if tag.get_text() == "":
                # 且該標註為排序第一
                if tag_order == 0:
                    # 在最前方插入標題
                    tag.insert_before(soup.new_tag('h1', 'First'))
                else:
                    # 移除 h1, h2 或 h3 標註, 只留下內容
                    tag.replaceWithChildren()
            # 表示單一元件的標題標註, 且標題為單一字串者
            else:
                # 判定若其排序第一, 則將 tag.name 為 h2 或 h3 者換為 h1
                if tag_order == 0:
                    tag.name = "h1"
            # 針對其餘單一字串內容的標註, 則保持原樣
        # 針對內容一個以上的標題標註
        #elif len(tag.contents) &gt; 1:
        else:
            # 假如該標註內容長度大於 1
            # 且該標註為排序第一
            if tag_order == 0:
                # 先移除 h1, h2 或 h3 標註, 只留下內容
                #tag.replaceWithChildren()
                # 在最前方插入標題
                tag.insert_before(soup.new_tag('h1', 'First'))
            else:
                # 只保留標題內容,  去除 h1, h2 或 h3 標註
                # 為了與前面的內文區隔, 先在最前面插入 br 標註
                tag.insert_before(soup.new_tag('br'))
                # 再移除非排序第一的 h1, h2 或 h3 標註, 只留下內容
                tag.replaceWithChildren()
        tag_order = tag_order + 1

    return soup

def file_get_contents(filename):
    # open file in utf-8 and return file content
    with open(filename, encoding="utf-8") as file:
        return file.read()

def parse_content():
    """use bs4 and re module functions to parse content.htm"""
    config_dir = "./"
    # if no content.htm, generate a head 1 and content 1 file
    if not os.path.isfile(config_dir+"content.htm"):
        # create content.htm if there is no content.htm
        File = open(config_dir + "content.htm", "w", encoding="utf-8")
        File.write("&lt;h1&gt;head 1&lt;/h1&gt;content 1")
        File.close()
    subject = file_get_contents(config_dir+"content.htm")
    # deal with content without content
    if subject == "":
        # create content.htm if there is no content.htm
        File = open(config_dir + "content.htm", "w", encoding="utf-8")
        File.write("&lt;h1&gt;head 1&lt;/h1&gt;content 1")
        File.close()
        subject = "&lt;h1&gt;head 1&lt;/h1&gt;content 1"
    # initialize the return lists
    head_list = []
    level_list = []
    page_list = []
    # make the soup out of the html content
    soup = bs4.BeautifulSoup(subject, 'html.parser')
    # 嘗試解讀各種情況下的標題
    soup = _remove_h123_attrs(soup)
    # 改寫 content.htm 後重新取 subject
    with open(config_dir + "content.htm", "wb") as f:
        f.write(soup.encode("utf-8"))
    subject = file_get_contents(config_dir+"content.htm")
    # get all h1, h2, h3 tags into list
    htag= soup.find_all(['h1', 'h2', 'h3'])
    n = len(htag)
    # get the page content to split subject using each h tag
    temp_data = subject.split(str(htag[0]))
    if len(temp_data) &gt; 2:
        subject = str(htag[0]).join(temp_data[1:])
    else:
        subject = temp_data[1]
    if n &gt;1:
            # i from 1 to i-1
            for i in range(1, len(htag)):
                head_list.append(htag[i-1].text.strip())
                # use name attribute of h* tag to get h1, h2 or h3
                # the number of h1, h2 or h3 is the level of page menu
                level_list.append(htag[i-1].name[1])
                temp_data = subject.split(str(htag[i]))
                if len(temp_data) &gt; 2:
                    subject = str(htag[i]).join(temp_data[1:])
                else:
                    subject = temp_data[1]
                # cut the other page content out of htag from 1 to i-1
                cut = temp_data[0]
                # add the page content
                page_list.append(cut)
    # last i
    # add the last page title
    head_list.append(htag[n-1].text.strip())
    # add the last level
    level_list.append(htag[n-1].name[1])
    temp_data = subject.split(str(htag[n-1]))
    # the last subject
    subject = temp_data[0]
    # cut the last page content out
    cut = temp_data[0]
    # the last page content
    page_list.append(cut)
    return head_list, level_list, page_list

print(parse_content())</pre><h1>輔助設計</h1>
<p>電腦輔助機械設計流程自從 Onshape 推出全雲端輔助設計套件後, 理應產生巨大變化, 但是我們感受到了嗎?</p>
<p><a href="https://www.onshape.com/cad-blog/who-screwed-up-my-model">https://www.onshape.com/cad-blog/who-screwed-up-my-model</a> </p>
<p><a href="https://www.colabsoftware.com/post/is-the-future-of-cad-in-the-cloud">https://www.colabsoftware.com/post/is-the-future-of-cad-in-the-cloud</a> </p>
<p><a href="https://www10.mcadcafe.com/blogs/jeffrowe/2018/11/01/altair-acquires-simsolid/">https://www10.mcadcafe.com/blogs/jeffrowe/2018/11/01/altair-acquires-simsolid/</a> </p>
<p><a href="http://www.cadalyst.com/cloud-based-cad/onshape-extends-cloud-based-cad-enterprise-part-1-41681">http://www.cadalyst.com/cloud-based-cad/onshape-extends-cloud-based-cad-enterprise-part-1-41681</a> </p>
<p><a href="https://www.engineering.com/DesignSoftware/DesignSoftwareArticles/ArticleID/17105/CAD-in-the-Cloud-is-Now.aspx">https://www.engineering.com/DesignSoftware/DesignSoftwareArticles/ArticleID/17105/CAD-in-the-Cloud-is-Now.aspx</a> </p><h2>Onshape</h2>
<p><a href="https://cad.onshape.com/FsDoc/">https://cad.onshape.com/FsDoc/</a> </p>
<p><a href="https://www.onshape.com/features/custom-features">https://www.onshape.com/features/custom-features</a> </p>
<p><a href="http://cadlab.mde.tw/post/tag/featurescript.html">http://cadlab.mde.tw/post/tag/featurescript.html</a> </p>
<p><a href="http://cadlab.mde.tw/post/onshape-featurescript-cheng-shi-yu-yan.html">http://cadlab.mde.tw/post/onshape-featurescript-cheng-shi-yu-yan.html</a> </p>
<p><a href="https://github.com/dcowden/featurescript">https://github.com/dcowden/featurescript</a> </p><h2>V-rep</h2>
<p><a href="http://www.coppeliarobotics.com/">http://www.coppeliarobotics.com/</a> </p>
<h4>User Manual</h4>
<p><a href="http://www.coppeliarobotics.com/helpFiles/index.html">http://www.coppeliarobotics.com/helpFiles/index.html</a> </p>
<h4>Forum</h4>
<p><a href="http://www.forum.coppeliarobotics.com/">http://www.forum.coppeliarobotics.com/</a> </p><h1>電子書</h1>
<p>Planning Algorithm: <a href="http://planning.cs.uiuc.edu/">http://planning.cs.uiuc.edu/</a> </p>
<p><a href="/downloads/planning_algorithm.pdf">planning_algorithm.pdf</a></p>
<p><a href="/downloads/basics_robotics.pdf">basics of robotics.pdf</a></p>
<p><a href="/downloads/elements_of_robotics.pdf">elements of robotics.pdf</a></p>
<p><a href="/downloads/IndustrialRobots.pdf">industrial robotics.pdf</a></p>
<p><a href="/downloads/next_generation_robotics.pdf">next generation robotics.pdf</a></p>
<p>modern robotics: <a href="http://hades.mech.northwestern.edu/index.php/Modern_Robotics">http://hades.mech.northwestern.edu/index.php/Modern_Robotics</a> </p>
<h2>協同編輯</h2>
<h4>LaTeX</h4>
<p><a href="https://miktex.org/download">https://miktex.org/download</a> </p>
<p><a href="https://miktex.org/howto/portable-edition">https://miktex.org/howto/portable-edition</a> </p>
<p><a href="https://tex.stackexchange.com/questions/13649/portable-minimal-distribution/357713">https://tex.stackexchange.com/questions/13649/portable-minimal-distribution/357713</a> </p>
<h4>Pandoc</h4>
<p><a href="https://github.com/jgm/pandoc">https://github.com/jgm/pandoc</a> </p>
<h4>MS Word</h4>
<p><a href="https://bit.ly/2KzIMGF">https://bit.ly/2KzIMGF</a> </p>
<p><a href="https://bit.ly/2DYXrdY">https://bit.ly/2DYXrdY</a> </p>
<p><a href="https://bit.ly/2PUNBAd">https://bit.ly/2PUNBAd</a> </p>
<p></p>
<p></p>
<p></p>