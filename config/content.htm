<h1>簡介</h1>
<p>2018 Fall 期末分組網站</p>
<p>本倉儲位於: <a href="https://github.com/mdecp2018/finalproject-bgx">https://github.com/mdecp2018/finalproject-bgx</a>  </p>
<p>Github 靜態網站:  <a href="https://mdecp2018.github.io/finalproject-bgx">https://mdecp2018.github.io/finalproject-bgx</a> </p>
<p>與 Heroku 上的 <a href="http://cp2018-bgx.herokuapp.com">http://cp2018-bgx.herokuapp.com</a> 動態網站保持同步</p>
<h2>靜態與動態網站</h2>
<h4>網站類型</h4>
<p>使用者在建構網站時, 可以選擇採用靜態或動態網站類型, 靜態網站主要伺服 <a href="https://en.wikipedia.org/wiki/HTML">html</a> 檔案, 其中可能內含能在客戶端瀏覽器中執行的 <a href="https://en.wikipedia.org/wiki/JavaScript">JavaScript</a> 程式.</p>
<p>而動態網站則將網際程式儲存在伺服器端, 透過解譯器與瀏覽器端的使用者互動後, 將 <a href="https://en.wikipedia.org/wiki/HTML">html</a> 檔案 (也可能內含能在客戶端瀏覽器中執行的 <a href="https://en.wikipedia.org/wiki/JavaScript">JavaScript</a> 程式) 送回瀏覽器端執行.</p>
<p>本課程的靜態網站利用 <a href="https://pages.github.com/">Github Pages</a> 建構, 而動態網站則採用 <a href="https://www.heroku.com/">Heroku</a> 建構.</p>
<h4>靜態網站優點</h4>
<p>相對於動態網站, 靜態網站架構單純, 且直接送回使用者要求的 <a href="https://en.wikipedia.org/wiki/HTML">html</a> 檔案, 反應速度快, 伺服器端通常只需 <a href="https://en.wikipedia.org/wiki/World_Wide_Web">WWW</a>  伺服器, 因此維護成本較低.</p>
<ol>
<li>架構單純</li>
<li>反應速度快</li>
<li>維護成本較低</li>
<li>較無受駭危機</li>
</ol>
<h4>靜態網站缺點</h4>
<ol>
<li>通常無法直接在網站中修改內容</li>
<li>較無法與使用者進行互動</li>
</ol>
<h4>動態網站優點</h4>
<ol>
<li>規劃彈性高</li>
<li>能與使用者直接進行互動</li>
</ol>
<h4>動態網站缺點</h4>
<ol>
<li>反應速度較慢</li>
<li>維護成本較高</li>
</ol>
<p><iframe allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/_wFJj94kSTU" width="560"></iframe></p><h1>Heroku 簡介</h1>
<p><iframe allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/QTOkqzCTGxw" width="560"></iframe></p>
<p><iframe allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/nRiykxq0oHQ" width="560"></iframe></p>
<p></p><h2>Heroku 設定</h2>
<p>在 <a href="http://mde.tw">http://mde.tw</a> 相關課程中, <a href="https://www.heroku.com/">Heroku</a>  雲端服務與 Github 倉儲中的 <a href="https://pages.github.com/">Github Pages</a> 分別扮演動態程式網站與靜態超文件網站伺服.</p>
<p>此地所謂的動態程式網站伺服, 指的是利用 <a href="http://flask.pocoo.org/">Flask</a> 程式框架, 建立 <a href="https://en.wikipedia.org/wiki/Web_Server_Gateway_Interface">Web Server Gateway  Interface</a> 架構的程式環境.</p>
<p>而靜態超文件網站伺服, 則包含一個 <a href="https://en.wikipedia.org/wiki/World_Wide_Web">WWW</a> 伺服器, 得以讓使用者透過瀏覽器, 擷取伺服器上的 <a href="https://en.wikipedia.org/wiki/HTML">html</a> 與 <a href="https://en.wikipedia.org/wiki/JavaScript">JavaScript</a> 程式, 且 <a href="https://en.wikipedia.org/wiki/JavaScript">JavaScript</a> 是下載到近端之後, 使用近端的硬體執行.</p>
<p>以下說明如何在近端利用可攜 <a href="https://devcenter.heroku.com/articles/heroku-cli">Heroku cli</a> 建立能與 <a href="https://github.com/">Github</a> 倉儲同步的動態雲端網站.</p>
<h4>在 Heroku 登記一個帳號</h4>
<p>利用電子郵箱, 在 <a href="https://www.heroku.com/">https://www.heroku.com/</a> 登記一個免費帳號, 在完成電子郵箱驗證後, 即可進入 Dashboard 新增一個應用程式.  而該應用程式名稱必須具備唯一性, 因為完成後, 即可建立 "應用程式名稱".herokuapp.com 網站.</p>
<p>接著進入該應用程式對應的 Settings 頁面, 可以查詢該應用程式的 git 倉儲對應 URL, 以及應用程式的網站名稱.</p>
<p>接下來, 則必須在可攜程式系統中配置 <a href="https://devcenter.heroku.com/articles/heroku-cli">Heroku cli</a> 環境, 以便利用 heroku login, heroku logs 等指令, 登入 <a href="https://www.heroku.com/">Heroku</a> 系統, 取得 git clone 與 push 或 pull 權限.</p>
<p>但是在此處, 隨後將在應用程式對應的 Deploy, 以 auto deploy 的自動部署, 讓特定的 Github repository 與 <a href="https://www.heroku.com/">Heroku</a> 的應用程式倉儲自動同步, 多人協同下的 Github 倉儲一旦改版, <a href="https://www.heroku.com/">Heroku</a> 動態網站將會自動保持同步.</p>
<h4>新增可攜 Heroku cli 客戶端</h4>
<p>下載 Heroku cli 可攜客戶端: <a href="https://drive.google.com/open?id=1mF84E-eskZTEa-blnrfT1m1JzbJ_1W77">heroku/7.18.9 win32-x64 node-v11.1.0</a></p>
<p>將檔案在 y:\ 中解開壓縮後, 修改 path 設定, 納入 %Disk%:\heroku\bin, 以便在隨身系統中執行 heroku cli 指令.</p>
<h4>利用 runtime.txt 指定 Python 版本</h4>
<p>runtime.txt 指定 Python 執行版本:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">python-3.7.1</pre>
<h4>利用 Procfile 指定啟動程式物件</h4>
<p>Procfile 宣告由 flaskapp.py 中的 app 執行動態程式:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">web gunicorn flaskapp:app</pre>
<h4>利用 requirements.txt 安裝所需模組</h4>
<p>requirements.txt 宣告執行動態程式所需要安裝的模組:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">Flask==1.0.2
gunicorn==19.7.1
Jinja2==2.10
MarkupSafe==1.0
Werkzeug==0.14.1
beautifulsoup4==4.6.0</pre>
<h4>在 Heroku Deploy 頁面設定與 Github 倉儲自動同步</h4>
<p><img alt="" height="275" src="/images/heroku_auto_deploy_with_github.png" width="600"/></p>
<p>設定完成後的動態網頁: <a href="http://cp2018-bgx.herokuapp.com/">http://cp2018-bgx.herokuapp.com/</a> </p>
<p>靜態網頁: <a href="https://mdecp2018.github.io/finalproject-bgx">https://mdecp2018.github.io/finalproject-bgx</a> </p>
<p>可用於多人協同的 Github 倉儲: <a href="https://github.com/mdecp2018/finalproject-bgx">https://github.com/mdecp2018/finalproject-bgx</a> </p>
<h1>Python 程式</h1>
<p>從 <a href="http://www.swig.org/">SWIG</a> 到 <a href="https://github.com/StatisKit/AutoWIG">AutoWIG</a>, 使用者可以將既有的 C/C++ 程式庫轉成可為 Python 程式呼叫的動態連結程式庫.</p>
<p>也可以利用 <a href="https://cython.org/">Cython</a> 技術提升 Python 程式效能.</p>
<p><a href="http://www.swig.org/">SWIG</a> 範例:</p>
<p><a href="https://github.com/StatisKit/AutoWIG">AutoWIG</a> 介紹:</p>
<p><a href="/downloads/AutoWIG%20- Automatic Generation of Python Bindings for C++ Libraries.pdf">AutoWIG: Automatic Generation of Python Bindings for C++ Libraries.pdf</a></p>
<p><iframe allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/N4q_Vud77Hw" width="560"></iframe></p>
<p><a href="https://cython.org/">Cython</a> 範例:</p>
<p></p><h2>動態網站範例</h2>
<p><a href="https://github.com/mdecourse/wcms-scrum1">https://github.com/mdecourse/wcms-scrum1</a> </p>
<p>從計算機程式 (Computer Programming) 到電腦輔助機械設計(Computer Aided Mechanical Design)</p>
<p>猜數字遊戲: <a href="https://wcms-scrum1.herokuapp.com/">https://wcms-scrum1.herokuapp.com/</a> </p>
<p>2D 國旗繪圖: <a href="https://wcms-scrum1.herokuapp.com/drawflag">https://wcms-scrum1.herokuapp.com/drawflag</a> </p>
<p>2D 五芒星繪圖: <a href="https://wcms-scrum1.herokuapp.com/drawstar">https://wcms-scrum1.herokuapp.com/drawstar</a> </p>
<p>2D 曲線繪圖加滑鼠操作: <a href="https://wcms-scrum1.herokuapp.com/drag">https://wcms-scrum1.herokuapp.com/drag</a> </p>
<p>正齒輪齒面寬設計: <a href="https://wcms-scrum1.herokuapp.com/gear_index">https://wcms-scrum1.herokuapp.com/gear_index</a> </p><h2>GUI 程式範例</h2>
<p><a href="https://github.com/kmolab/pymcadp">https://github.com/kmolab/pymcadp</a> </p><h1>parse_content 範例</h1>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import os
import bs4

def _remove_h123_attrs(soup):
    tag_order = 0
    for tag in soup.find_all(['h1', 'h2', 'h3']):
        # 假如標註內容沒有字串
        #if len(tag.text) == 0:
        if len(tag.contents) ==0:
            # 且該標註為排序第一
            if tag_order == 0:
                tag.string = "First"
            else:
                # 若該標註非排序第一, 則移除無內容的標題標註
                tag.extract()
        # 針對單一元件的標題標註
        elif len(tag.contents) == 1:
            # 若內容非為純文字, 表示內容為其他標註物件
            if tag.get_text() == "":
                # 且該標註為排序第一
                if tag_order == 0:
                    # 在最前方插入標題
                    tag.insert_before(soup.new_tag('h1', 'First'))
                else:
                    # 移除 h1, h2 或 h3 標註, 只留下內容
                    tag.replaceWithChildren()
            # 表示單一元件的標題標註, 且標題為單一字串者
            else:
                # 判定若其排序第一, 則將 tag.name 為 h2 或 h3 者換為 h1
                if tag_order == 0:
                    tag.name = "h1"
            # 針對其餘單一字串內容的標註, 則保持原樣
        # 針對內容一個以上的標題標註
        #elif len(tag.contents) &gt; 1:
        else:
            # 假如該標註內容長度大於 1
            # 且該標註為排序第一
            if tag_order == 0:
                # 先移除 h1, h2 或 h3 標註, 只留下內容
                #tag.replaceWithChildren()
                # 在最前方插入標題
                tag.insert_before(soup.new_tag('h1', 'First'))
            else:
                # 只保留標題內容,  去除 h1, h2 或 h3 標註
                # 為了與前面的內文區隔, 先在最前面插入 br 標註
                tag.insert_before(soup.new_tag('br'))
                # 再移除非排序第一的 h1, h2 或 h3 標註, 只留下內容
                tag.replaceWithChildren()
        tag_order = tag_order + 1

    return soup

def file_get_contents(filename):
    # open file in utf-8 and return file content
    with open(filename, encoding="utf-8") as file:
        return file.read()

def parse_content():
    """use bs4 and re module functions to parse content.htm"""
    config_dir = "./"
    # if no content.htm, generate a head 1 and content 1 file
    if not os.path.isfile(config_dir+"content.htm"):
        # create content.htm if there is no content.htm
        File = open(config_dir + "content.htm", "w", encoding="utf-8")
        File.write("&lt;h1&gt;head 1&lt;/h1&gt;content 1")
        File.close()
    subject = file_get_contents(config_dir+"content.htm")
    # deal with content without content
    if subject == "":
        # create content.htm if there is no content.htm
        File = open(config_dir + "content.htm", "w", encoding="utf-8")
        File.write("&lt;h1&gt;head 1&lt;/h1&gt;content 1")
        File.close()
        subject = "&lt;h1&gt;head 1&lt;/h1&gt;content 1"
    # initialize the return lists
    head_list = []
    level_list = []
    page_list = []
    # make the soup out of the html content
    soup = bs4.BeautifulSoup(subject, 'html.parser')
    # 嘗試解讀各種情況下的標題
    soup = _remove_h123_attrs(soup)
    # 改寫 content.htm 後重新取 subject
    with open(config_dir + "content.htm", "wb") as f:
        f.write(soup.encode("utf-8"))
    subject = file_get_contents(config_dir+"content.htm")
    # get all h1, h2, h3 tags into list
    htag= soup.find_all(['h1', 'h2', 'h3'])
    n = len(htag)
    # get the page content to split subject using each h tag
    temp_data = subject.split(str(htag[0]))
    if len(temp_data) &gt; 2:
        subject = str(htag[0]).join(temp_data[1:])
    else:
        subject = temp_data[1]
    if n &gt;1:
            # i from 1 to i-1
            for i in range(1, len(htag)):
                head_list.append(htag[i-1].text.strip())
                # use name attribute of h* tag to get h1, h2 or h3
                # the number of h1, h2 or h3 is the level of page menu
                level_list.append(htag[i-1].name[1])
                temp_data = subject.split(str(htag[i]))
                if len(temp_data) &gt; 2:
                    subject = str(htag[i]).join(temp_data[1:])
                else:
                    subject = temp_data[1]
                # cut the other page content out of htag from 1 to i-1
                cut = temp_data[0]
                # add the page content
                page_list.append(cut)
    # last i
    # add the last page title
    head_list.append(htag[n-1].text.strip())
    # add the last level
    level_list.append(htag[n-1].name[1])
    temp_data = subject.split(str(htag[n-1]))
    # the last subject
    subject = temp_data[0]
    # cut the last page content out
    cut = temp_data[0]
    # the last page content
    page_list.append(cut)
    return head_list, level_list, page_list

print(parse_content())</pre>
<p></p>